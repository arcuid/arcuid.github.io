<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git学习和使用</title>
      <link href="/2024/04/02/Git%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/04/02/Git%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>掌握Git企业应用开发的基本操作以及背后原理，掌握工作区、暂存区、版本库的区别</li><li>掌握Git的版本管理，例如版本回退、撤销、修改等操作</li><li>掌握Git的分支管理，例如创建分支、合并分支、删除分支</li><li>掌握本地仓库与远程仓库之间的区别，达到个人企业级开发水准</li><li>了解团队协作开发，以及常见的模型</li></ul><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>使用命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># centos安装</span><br><span class="line">sudo yum install -y git</span><br><span class="line"># centos移除</span><br><span class="line">sudo yum remove -y git</span><br><span class="line"># ubantu安装</span><br><span class="line">sudo apt-get install -y git</span><br><span class="line"># ubantu移除</span><br><span class="line">sudo apt-get remove -y git</span><br><span class="line"># 查看git是否安装成功（版本）</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p><strong>如何初始化本地仓库：git init，执行该命令后就会在当前目录生成一个.git文件，这个.git文件就是版本库</strong></p><p><strong>如何配置用户名以及邮箱：</strong></p><ul><li>配置用户名称：git [–global] config user.name “xxx”</li><li>配置用户邮箱：git [–global] config user.email “xxx”</li></ul><p>可以使用git config -l查看配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 配置name</span><br><span class="line">git config user.name &quot;ricejson&quot;</span><br><span class="line"># 配置email</span><br><span class="line">git config user.email &quot;wjjbangbangbang@163.com&quot;</span><br><span class="line"># 查看配置</span><br><span class="line">git config -l</span><br><span class="line"># 移除name</span><br><span class="line">git config --unset user.name</span><br><span class="line"># 移除email</span><br><span class="line">git config --unset user.email</span><br><span class="line"># 配置全局name</span><br><span class="line">git config --global user.name &quot;ricejson&quot;</span><br><span class="line"># 配置全局email</span><br><span class="line">git config --global user.email &quot;wjjbangbangbang@163.com&quot;</span><br></pre></td></tr></table></figure><p><strong>将工作区文件添加到暂存区中：git add .&#x2F;具体文件</strong><br><strong>将暂存区文件添加到master分支下：git commit -m “具体描述信息”</strong><br><strong>可以使用git log –pretty&#x3D;oneline命令查看历史提交信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# touch readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# ls</span><br><span class="line">readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add readme file&quot;</span><br><span class="line">[master (root-commit) c85412b] add readme file</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log </span><br><span class="line">commit c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 (HEAD -&gt; master)</span><br><span class="line">Author: ricejson &lt;wjjbangbangbang@163.com&gt;</span><br><span class="line">Date:   Mon May 13 00:55:20 2024 +0800</span><br><span class="line">add readme file</span><br></pre></td></tr></table></figure><p>.git文件内容（版本库）：</p><ul><li>index：标识暂存区&#x2F;索引区中的内容</li><li>head：指针，指向master分支下最新提交的记录</li><li>objects：对象区，每一次对于工作区文件的修改都会对应到对象区中的一个.git对象</li></ul><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="git-status-命令"><a href="#git-status-命令" class="headerlink" title="git status 命令"></a>git status 命令</h3><p><strong>git追踪的是文件的修改而非文件本身！</strong><br>我们需要清楚的了解到工作区与暂存区的文件是不一样的<br>输入git status命令可以查看仓库当前的状态，用来查看该文件内容是否相较于之前提交的版本有所修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# ls</span><br><span class="line">readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">modified:   readme</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>我们可以看出readme文件已经被修改了，但是还没有进行添加和提交，当我们使用git add readme可以进行添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git add readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">modified:   readme</span><br></pre></td></tr></table></figure><p>当我们对readme文件添加到暂存区后，git status会显示待commited</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add readme&quot;</span><br><span class="line">[master 689991b] add readme</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>当我们进行commit之后会显示当前tree是clean的</p><h3 id="git-diff-命令"><a href="#git-diff-命令" class="headerlink" title="git diff 命令"></a>git diff 命令</h3><p>git status命令可以让我们知道哪些文件被修改了，但是我们无法看到具体修改的内容，但是git diff命令就可以查看文件的差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git add readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git diff readme</span><br><span class="line">diff --git a/readme b/readme</span><br><span class="line">index 8c7ca04..045403d 100644</span><br><span class="line">--- a/readme</span><br><span class="line">+++ b/readme</span><br><span class="line">@@ -2,3 +2,5 @@ hello git</span><br><span class="line"> hello world!</span><br><span class="line"> </span><br><span class="line"> ricejson</span><br><span class="line">+</span><br><span class="line">+one line</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git diff HEAD -- readme</span><br><span class="line">diff --git a/readme b/readme</span><br><span class="line">index 15ca5b9..045403d 100644</span><br><span class="line">--- a/readme</span><br><span class="line">+++ b/readme</span><br><span class="line">@@ -1,2 +1,6 @@</span><br><span class="line"> hello git</span><br><span class="line">-hello world!t</span><br><span class="line">+hello world!</span><br><span class="line">+</span><br><span class="line">+ricejson</span><br><span class="line">+</span><br><span class="line">+one line</span><br></pre></td></tr></table></figure><p>git diff filename：查看工作区与暂存区中文件的差异</p><p>git diff HEAD – filename：查看工作区和版本库中文件的差异</p><h3 id="git-reset命令"><a href="#git-reset命令" class="headerlink" title="git reset命令"></a>git reset命令</h3><p>命令：git reset [–soft | –mixed | –hard] [HEAD]</p><ul><li>mixed为默认参数：表示将版本库以及暂存区内容回退到指定版本，工作区内容不变</li><li>soft：表示将版本库内容回退到指定版本，工作区以及暂存区内容不变</li><li>hard：表示将版本库、工作区、暂存区都回退到指定版本</li><li>HEAD：表示回退到当前版本，HEAD^、HEAD~1表示上一个版本，以此类推</li></ul><p>现在我们想回退到v2版本，因此需要使用–hard参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --pretty=oneline</span><br><span class="line">f4b771d0709db09cc5b5eb4e62335a755154209e (HEAD -&gt; master) update readme v3</span><br><span class="line">3662918784e02c58608b814ecba90e53292e581d update readme v2</span><br><span class="line">689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git reset --hard 3662918784e02c58608b814ecba90e53292e581d</span><br><span class="line">HEAD is now at 3662918 update readme v2</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --pretty=oneline</span><br><span class="line">3662918784e02c58608b814ecba90e53292e581d (HEAD -&gt; master) update readme v2</span><br><span class="line">689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br></pre></td></tr></table></figure><p>但是现在我又后悔了，想回到v3版本应该怎么办？此时git log无法查看v3的提交id，还好Git还提供了一个命令git reflog进行补救：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git reflog</span><br><span class="line">3662918 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3662918784e02c58608b814ecba90e53292e581d</span><br><span class="line">f4b771d HEAD@&#123;1&#125;: commit: update readme v3</span><br><span class="line">3662918 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: update readme v2</span><br><span class="line">689991b HEAD@&#123;3&#125;: commit: add readme</span><br><span class="line">c85412b HEAD@&#123;4&#125;: commit (initial): add readme file</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git reset --hard f4b771d</span><br><span class="line">HEAD is now at f4b771d update readme v3</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --pretty=oneline</span><br><span class="line">f4b771d0709db09cc5b5eb4e62335a755154209e (HEAD -&gt; master) update readme v3</span><br><span class="line">3662918784e02c58608b814ecba90e53292e581d update readme v2</span><br><span class="line">689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br></pre></td></tr></table></figure><h2 id="git-rm命令"><a href="#git-rm命令" class="headerlink" title="git rm命令"></a>git rm命令</h2><p>git rm [file]相当于rm [file] + git add file1的结合体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add file1&quot;</span><br><span class="line">[master e907760] add file1</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 file1</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git rm file1</span><br><span class="line">rm &#x27;file1&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">deleted:    file1</span><br><span class="line"></span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;remove file1&quot;</span><br><span class="line">[master 6e35bc4] remove file1</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 file1</span><br></pre></td></tr></table></figure><h3 id="git-branch-命令"><a href="#git-branch-命令" class="headerlink" title="git branch 命令"></a>git branch 命令</h3><p>查看当前所有的分支：<strong>git branch</strong><br>之前我们观察到的.git目录下HEAD指针其实是指向master分支<br>而master分支则对应指向该分支下的提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat .git/refs/heads/master</span><br><span class="line">6e35bc4cab6906b0cb074e2af434b6dca77bb71f</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git cat-file -p 6e35bc4cab6906b0cb074e2af434b6dca77bb71f</span><br><span class="line">tree 6ef62311f0d21fa88145f6e5c8e70bd80cd861b8</span><br><span class="line">parent e907760d8466f84b3d655b287df15bebc50f83a5</span><br><span class="line">author ricejson &lt;wjjbangbangbang@163.com&gt; 1715595900 +0800</span><br><span class="line">committer ricejson &lt;wjjbangbangbang@163.com&gt; 1715595900 +0800</span><br><span class="line"></span><br><span class="line">remove file1</span><br></pre></td></tr></table></figure><p>新建分支：<strong>git branch dev</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch dev</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# tree .git</span><br><span class="line">.git</span><br><span class="line">├── branches</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── HEAD</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-merge-commit.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── push-to-checkout.sample</span><br><span class="line">│   ├── sendemail-validate.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           ├── dev</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 04</span><br><span class="line">│   │   └── 5403d976be5fbc25a531b5c924e664b3221fc6</span><br><span class="line">│   ├── 15</span><br><span class="line">│   │   └── ca5b906102a278626835d25f3d740c71ec3374</span><br><span class="line">│   ├── 22</span><br><span class="line">│   │   └── d19a942e422df71b16f6169eb65c27894d5a97</span><br><span class="line">│   ├── 36</span><br><span class="line">│   │   └── 62918784e02c58608b814ecba90e53292e581d</span><br><span class="line">│   ├── 68</span><br><span class="line">│   │   └── 9991ba08bd08804de26123c388b9b0d666e4f0</span><br><span class="line">│   ├── 6e</span><br><span class="line">│   │   ├── 35bc4cab6906b0cb074e2af434b6dca77bb71f</span><br><span class="line">│   │   ├── 84d6a5ed71a327ba3376cac9801558d9ea2e80</span><br><span class="line">│   │   └── f62311f0d21fa88145f6e5c8e70bd80cd861b8</span><br><span class="line">│   ├── 8c</span><br><span class="line">│   │   └── 7ca049e4ed76db4c19a2391ef45b749f8ae8c4</span><br><span class="line">│   ├── 8d</span><br><span class="line">│   │   └── 0e41234f24b6da002d962a26c2495ea16a425f</span><br><span class="line">│   ├── 8e</span><br><span class="line">│   │   └── 3bde47132a2d53b6c01daf870702fba582aeff</span><br><span class="line">│   ├── c8</span><br><span class="line">│   │   └── 5412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826</span><br><span class="line">│   ├── cd</span><br><span class="line">│   │   └── 979bb355c3c301ed85b46c2b712e7a259625e0</span><br><span class="line">│   ├── de</span><br><span class="line">│   │   └── 55f88aa577ebe8b1294c26e0315470bd7bb8d4</span><br><span class="line">│   ├── e5</span><br><span class="line">│   │   └── c092dc5d9fcb8fdcd53fe30142957a503cc681</span><br><span class="line">│   ├── e6</span><br><span class="line">│   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">│   ├── e9</span><br><span class="line">│   │   └── 07760d8466f84b3d655b287df15bebc50f83a5</span><br><span class="line">│   ├── eb</span><br><span class="line">│   │   └── b76d2d63485465b349f945977bbed134ed0f04</span><br><span class="line">│   ├── f4</span><br><span class="line">│   │   └── b771d0709db09cc5b5eb4e62335a755154209e</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">├── ORIG_HEAD</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   ├── dev</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line">29 directories, 45 files</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="git-checkout命令"><a href="#git-checkout命令" class="headerlink" title="git checkout命令"></a>git checkout命令</h3><p>切换当前分支：<strong>git checkout 分支名</strong></p><p>创建分支同时切换所在分支：<strong>git checkout -b 分支名</strong></p><h3 id="git-merge命令"><a href="#git-merge命令" class="headerlink" title="git merge命令"></a>git merge命令</h3><p>合并分支命令：git merge 分支名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# ls</span><br><span class="line">readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add merge branch content&quot;</span><br><span class="line">[dev febf6ee] add merge branch content</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge dev</span><br><span class="line">Updating 6e35bc4..febf6ee</span><br><span class="line">Fast-forward</span><br><span class="line"> readme | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --pretty=oneline</span><br><span class="line">febf6ee072d3f48c6bc1e46a60cb2d650f3a575f (HEAD -&gt; master, dev) add merge branch content</span><br><span class="line">6e35bc4cab6906b0cb074e2af434b6dca77bb71f remove file1</span><br><span class="line">e907760d8466f84b3d655b287df15bebc50f83a5 add file1</span><br><span class="line">f4b771d0709db09cc5b5eb4e62335a755154209e update readme v3</span><br><span class="line">3662918784e02c58608b814ecba90e53292e581d update readme v2</span><br><span class="line">689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br></pre></td></tr></table></figure><h2 id="实践演练"><a href="#实践演练" class="headerlink" title="实践演练"></a>实践演练</h2><h3 id="演示合并冲突"><a href="#演示合并冲突" class="headerlink" title="演示合并冲突"></a>演示合并冲突</h3><p>步骤一：新建一个dev1分支，将readme新增add dev1内容，并进行提交</p><p>步骤二：在master分支下将readme新增add master内容，并进行提交</p><p>步骤三：进行合并操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch dev1</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">  dev1</span><br><span class="line">* master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout dev1</span><br><span class="line">Switched to branch &#x27;dev1&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">* dev1</span><br><span class="line">  master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add dev1</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add dev1&quot;</span><br><span class="line">[dev1 f1c4920] add dev1</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add master&quot;</span><br><span class="line">[master 6eb52f9] add master</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --pretty=oneline</span><br><span class="line">6eb52f96f549ad74d35813dc8567797019660735 (HEAD -&gt; master) add master</span><br><span class="line">febf6ee072d3f48c6bc1e46a60cb2d650f3a575f add merge branch content</span><br><span class="line">6e35bc4cab6906b0cb074e2af434b6dca77bb71f remove file1</span><br><span class="line">e907760d8466f84b3d655b287df15bebc50f83a5 add file1</span><br><span class="line">f4b771d0709db09cc5b5eb4e62335a755154209e update readme v3</span><br><span class="line">3662918784e02c58608b814ecba90e53292e581d update readme v2</span><br><span class="line">689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge dev1</span><br><span class="line">Auto-merging readme</span><br><span class="line">CONFLICT (content): Merge conflict in readme</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">add master</span><br><span class="line">=======</span><br><span class="line">add dev1</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev1</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add master&quot;</span><br><span class="line">[master 4717bf6] add master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge dev1</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><p>现在有这样一种情况：master分支下又新建了一个dev分支开发别的业务，但是此时突然发现master分支代码存在bug，因此需要修复</p><p>注意：不能在master分支下直接修复bug！因为线上环境一定要保证稳定</p><p>步骤一：先在reslove_bug分支下修复正确代码，然后进行提交并合并到master分支下</p><p>步骤二：在dev分支下，将master分支合并到dev分支下，然后解决冲突再进行提交</p><p>步骤三：最后将dev分支合并到master分支下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout -b dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# ls</span><br><span class="line">readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;add coding&quot;</span><br><span class="line">[dev e6d2c36] add coding</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# ls</span><br><span class="line">readme</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme</span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout -b reslove_bug</span><br><span class="line">Switched to a new branch &#x27;reslove_bug&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit  -m &quot;add reslove bug&quot;</span><br><span class="line">[reslove_bug 267809e] add reslove bug</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge reslove_bug</span><br><span class="line">Updating 4717bf6..267809e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master reslove bug</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master</span><br><span class="line"></span><br><span class="line">i am coding...</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge master</span><br><span class="line">Auto-merging readme</span><br><span class="line">CONFLICT (content): Merge conflict in readme</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# vim readme </span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git add .</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git commit -m &quot;merge reslove bug to dev&quot;</span><br><span class="line">[dev 95fff14] merge reslove bug to dev</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge -m &quot;merge master to dev&quot; master</span><br><span class="line">Already up to date.</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master reslove bug</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git merge dev -m &quot;merge dev to master&quot;</span><br><span class="line">Updating 267809e..95fff14</span><br><span class="line">Fast-forward (no commit created; -m option ignored)</span><br><span class="line"> readme | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# cat readme </span><br><span class="line">hello git</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">ricejson</span><br><span class="line"></span><br><span class="line">one line</span><br><span class="line"></span><br><span class="line">dev branch</span><br><span class="line"></span><br><span class="line">add master reslove bug</span><br><span class="line"></span><br><span class="line">i am coding...</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# git log --graph --pretty=oneline</span><br><span class="line">*   95fff140599ed8d3ef010f5e8ad280570f46b1a7 (HEAD -&gt; master, dev) merge reslove bug to dev</span><br><span class="line">|\  </span><br><span class="line">| * 267809ed8ec8759bea2ac269ed4b1217081beba7 (reslove_bug) add reslove bug</span><br><span class="line">* | e6d2c366dfae0c939715c5ae52abe70d894923bd add coding</span><br><span class="line">|/  </span><br><span class="line">*   4717bf64651c6f05c64a5a136a72814305365b75 add master</span><br><span class="line">|\  </span><br><span class="line">| * f1c4920a23ab59a6eedd692defa071e66ed623d6 add dev1</span><br><span class="line">* | 6eb52f96f549ad74d35813dc8567797019660735 add master</span><br><span class="line">|/  </span><br><span class="line">* febf6ee072d3f48c6bc1e46a60cb2d650f3a575f add merge branch content</span><br><span class="line">* 6e35bc4cab6906b0cb074e2af434b6dca77bb71f remove file1</span><br><span class="line">* e907760d8466f84b3d655b287df15bebc50f83a5 add file1</span><br><span class="line">* f4b771d0709db09cc5b5eb4e62335a755154209e update readme v3</span><br><span class="line">* 3662918784e02c58608b814ecba90e53292e581d update readme v2</span><br><span class="line">* 689991ba08bd08804de26123c388b9b0d666e4f0 add readme</span><br><span class="line">* c85412bc2d6e2e7b1c94b1c9f3b36c44fd6a4826 add readme file</span><br><span class="line">[root@VM-12-4-opencloudos gitcode]# </span><br></pre></td></tr></table></figure><h2 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h2><p><strong>克隆远程仓库</strong></p><ul><li>首先需要查看本地主目录下有无&#x2F;root&#x2F;.ssh&#x2F;id_rsa以及.ssh&#x2F;id_rsa.pub这两个秘钥</li><li>【上述步骤没有则需要执行】ssh-keygen -t rsa -C “<a href="mailto:&#x77;&#106;&#x6a;&#x62;&#97;&#x6e;&#x67;&#x62;&#x61;&#110;&#x67;&#98;&#x61;&#x6e;&#x67;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;">&#x77;&#106;&#x6a;&#x62;&#97;&#x6e;&#x67;&#x62;&#x61;&#110;&#x67;&#98;&#x61;&#x6e;&#x67;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;</a>“生成密钥</li><li>将id_rsa.pub中的公钥内容复制到gitee平台配置中</li><li>然后使用SSH协议执行git clone命令克隆仓库</li></ul><p><strong>推送到远程仓库</strong></p><p>命令：git push origin(远程仓库名) master(本地分支):master(远程分支)</p><p>如果本地分支和远程分支一致，可以简写为git push origin master</p><p><strong>从远程仓库进行拉取</strong></p><p>命令：git pull origin(远程仓库名) master(远程分支名):master(本地分支名)</p><p>注意：</p><ul><li>如果本地分支和远程分支一致，可以简写为git pull origin master</li><li>pull命令执行了两件事，一件是clone代码，另一件就是进行merge合并</li></ul><p><strong>.gitignore忽略文件</strong></p><p>使用方法：</p><ul><li>可以使用*.yml忽略所有的.yml格式结尾的文件</li><li>可以使用文件名忽略文件</li><li>可以使用!表示不忽略该文件</li><li>可以使用git add -f 强制添加（可以无视忽略规则）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# touch .gitignore</span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# vim .gitignore </span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# cat .gitignore </span><br><span class="line"># 配置忽略文件</span><br><span class="line"></span><br><span class="line">*.yml</span><br><span class="line"></span><br><span class="line">!test.yml</span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# touch application.yml</span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &#x27;origin/master&#x27;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">modified:   file.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">.gitignore</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# touch test.yml</span><br><span class="line">[root@VM-12-4-opencloudos remote-gitcode]# git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &#x27;origin/master&#x27;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">modified:   file.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">.gitignore</span><br><span class="line">test.yml</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><h2 id="多人协作开发实战"><a href="#多人协作开发实战" class="headerlink" title="多人协作开发实战"></a>多人协作开发实战</h2><p>查看远程分支和本地分支：git branch -a</p><p>查看远程分支：git branch -r</p><p>新建并切换分支并与远程分支建立链接：git checkout -b dev origin&#x2F;dev</p><p>目标：在本地仓库中file.txt文件新增aaa以及bbb内容</p><p>环境：存在开发者1以及开发者2，要求开发者1完成aaa，开发者2完成bbb</p><p>条件：两个开发者基于同一个分支进行开发</p><ol><li>在gitee平台新建分支dev用于开发</li><li>在开发者1平台下进行git pull拉取最新代码、在开发者2平台下进行git pull拉取最新代码</li><li>在开发者1平台下使用git checkout -b dev origin&#x2F;dev新建并切换分支，并与远程dev分支建立链接</li><li>在dev分支下修改aaa代码并add、commit并push到远程dev分支下</li><li>在开发者2平台下进行git checkout -b dev origin&#x2F;dev新建并切换分支，并与远程dev分支建立链接</li><li>在dev分支下修改bbb代码并add、commit并push到远程dev分支下，此时报错，因为出现合并冲突</li><li>在开发者2中将远程dev分支下内容进行pull到dev下进行解决冲突，然后重新add、commit、push操作</li><li>dev分支合并到master下</li></ol><ul><li>方式一：使用提交PR单，交由审核人员进行审核</li><li>方式二：在本地操作，首先进行git pull拉取最新代码，然后将master分支合并到dev下解决冲突，在提交到本地master分支，然后再由master进行push</li></ul><ol start="9"><li>最后dev分支开发完毕后删除即可</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】存储过程与存储函数</title>
      <link href="/2024/02/05/%E3%80%90MySQL%E3%80%91%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2024/02/05/%E3%80%90MySQL%E3%80%91%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="存储过程与函数概述"><a href="#存储过程与函数概述" class="headerlink" title="存储过程与函数概述"></a>存储过程与函数概述</h2><p>含义：存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过 预先编译 的 SQL 语句<br>的封装。<br>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用<br>存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>创建存储过程的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>参数修饰符代表的含义：</p><ul><li>IN：代表当前参数为输入参数，存储过程可以读取这个参数，当没有指定参数修饰符时默认为IN</li><li>OUT：代表当前参数为输出参数，存储过程执行时会将结果存储到该输出参数中</li><li>INOUT：代表当前参数既可以是输入参数也可以是输出参数</li></ul><p>[characteristics]表示创建存储过程时对于存储过程的约束条件</p><p>其取值信息如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123;<span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA&#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123;DEFINER <span class="operator">|</span> INVOKER&#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>LANGUAGE SQL：代表当前存储过程使用的是SQL语句，当前系统支持SQL</li><li>[NOT] DETERMINISTIC：指明当前存储过程执行结果是否是确定的，即相同的输入是否会得到相同的输出，如果相同则表明是却确定的为DETERMINISTIC反之则为NOT DETERMINISTIC</li><li>{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}：用来指定子程序使用SQL的限制</li><li>SQL SECURITY：用来指定当前存储过程的权限,DEFINER表明只有当前存储过程的创建者或者定义者才能够执行当前存储过程,INVOKER表明只有当前具有存储过程的访问权限才能够执行当前存储过程</li></ul><p>通常定义存储过程我们需要设置新的结束标记，通过使用DELIMITER 符号的方式，防止在SQL语句中因为分号而误以为语句提前结束，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">sql</span> 语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">sql</span> 语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> select_all_data(); # 调用存储过程</span><br></pre></td></tr></table></figure><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> avg_employee_salary()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> avg_employee_salary(); # 调用存储过程</span><br></pre></td></tr></table></figure><p>举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_max_salary()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> show_max_salary(); # 调用存储过程</span><br></pre></td></tr></table></figure><p>举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_min_salary(<span class="keyword">OUT</span> ms <span class="keyword">DOUBLE</span>(<span class="number">8</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">INTO</span> ms</span><br><span class="line"><span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> show_min_salary(<span class="variable">@ms</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ms</span>;</span><br></pre></td></tr></table></figure><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><p>存储过程的调用有多种格式，但是都必须通过关键字CALL调用</p><p>CALL 存储过程名(实参列表)</p><p>格式：</p><ol><li>调用IN模式的参数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sp1(<span class="string">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>调用OUT模式的参数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>调用INOUT模式的参数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span> <span class="operator">=</span> <span class="string">&#x27;值&#x27;</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><h2 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h2><h3 id="语法分析-1"><a href="#语法分析-1" class="headerlink" title="语法分析"></a>语法分析</h3><p>创建存储函数的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 存储函数名(形参名 形参类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体 # 函数体中一定有<span class="keyword">return</span>语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>参数列表，其中IN、OUT、INOUT只对于存储过程有效，对于存储函数来说参数修饰符默认为IN</li><li>RETURNS语句表示函数返回数据的类型，返回值对于函数FUNCTION而言时强制的，并且在函数体中必须要有RETURN子句的出现</li><li>characteristics表示存储函数的约束，与存储过程中描述的一致，这里不再重复赘述</li><li>函数体也可以用begin和end表示SQL语句的开始与结束，若只有一行也可以省略</li></ul><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>在MySQL中，存储函数与系统函数的使用是一样的，本质上没有什么区别。只是系统函数是由MySQL开发者定义的，而存储函数则是由用户自定义的</p><p>调用语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名(实参列表);</span><br></pre></td></tr></table></figure><h3 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h3><p>举例1：创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> emps</span><br><span class="line">  <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>); </span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> email_by_name();</span><br></pre></td></tr></table></figure><p>举例2：创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> email_by_id;</span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_id(emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> email_by_id(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>举例3：创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> count_by_id(dept_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emps</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> count_by_id(<span class="number">80</span>);</span><br></pre></td></tr></table></figure><h2 id="存储过程与函数的查看、修改、删除"><a href="#存储过程与函数的查看、修改、删除" class="headerlink" title="存储过程与函数的查看、修改、删除"></a>存储过程与函数的查看、修改、删除</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>我们创建了存储过程、存储函数，那么是否可以观察到呢？这里介绍三种方法</p><p><strong>SHOW CREATE语句查看存储过程与存储函数的创建信息</strong></p><p>基本语法结构如下：</p><p>SHOW CREATE {PROCEDURE | FUNCTION} 存储过程名或函数名</p><p>举例：</p><p>SHOW CREATE FUNCTION count_by_id;</p><p><strong>SHOW STATUS语句查看存储过程与函数的状态信息</strong></p><p>基本语法结构如下：</p><p>SHOW {PROCEDURE | FUNCTION} STATUS [LIKE pattern]</p><p>举例：</p><p>SHOW PROCEDURE STATUC LIKE ‘select_all_data’</p><p><strong>从表information_schema.Routines表中查看存储过程与存储函数的信息</strong></p><p>MySQL中存储过程与存储函数的信息会保存在系统数据库表中，我们可以通过information_schema.Routines进行查看</p><p>基本语法格式如下：</p><p>SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME &#x3D; ‘存储过程或函数名’ AND ROUTINE_TYPE &#x3D; {‘PROCEDURE’ | ‘FUNCTION’}</p><p>举例：</p><p>SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME &#x3D; ‘avg_employee_salary’ AND ROUTINE_TYPE &#x3D; ‘PROCEDURE’;</p><h3 id="修改存储过程与存储函数"><a href="#修改存储过程与存储函数" class="headerlink" title="修改存储过程与存储函数"></a>修改存储过程与存储函数</h3><p>这里的修改作用范围很小，并不能修改内部的存储过程或存储函数体内容，只能修改建立存储过程以及存储函数时的约束，即之前所提到的[characteristics]</p><p>语法格式：</p><p>ALTER FUNCTION count_by_id CONTAINS SQL COMMENT ‘查询部门员工人数’;</p><h3 id="删除存储过程与存储函数"><a href="#删除存储过程与存储函数" class="headerlink" title="删除存储过程与存储函数"></a>删除存储过程与存储函数</h3><p>语法格式：</p><p>DROP {PROCEDURE | FUNCTION} IF EXISTS 存储过程或存储函数名</p><p>举例：</p><p>DROP PROCEDURE IF EXISTS select_all_data;</p><h2 id="关于存储过程的争议"><a href="#关于存储过程的争议" class="headerlink" title="关于存储过程的争议"></a>关于存储过程的争议</h2><p>存储过程的优点：</p><ul><li>体现了较好的封装性</li><li>存储过程实现了一次编译多次运行，提高代码复用率</li><li>存储过程封装了代码，使用时只需要调用。减少了网络传输量</li><li>存储过程可以设置用户权限，提高了安全性</li></ul><p>存储过程的缺点：</p><ul><li>可移植性差，不同DBMS语法差异比较大</li><li>调试比较困难</li><li>不适合高并发中分库分表的情景</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】常见锁策略及synchronized</title>
      <link href="/2023/12/07/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E5%B8%B8%E8%A7%81%E9%94%81%E7%AD%96%E7%95%A5%E5%8F%8Asynchronized/"/>
      <url>/2023/12/07/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E5%B8%B8%E8%A7%81%E9%94%81%E7%AD%96%E7%95%A5%E5%8F%8Asynchronized/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的锁策略"><a href="#常见的锁策略" class="headerlink" title="常见的锁策略"></a>常见的锁策略</h2><h3 id="常见的锁策略-1"><a href="#常见的锁策略-1" class="headerlink" title="常见的锁策略"></a>常见的锁策略</h3><p><strong>乐观锁</strong>：预估当前发生锁冲突的概率会比较小，因此对于加锁过程没有做过多的操作</p><p><strong>悲观锁</strong>：预估当前发生锁冲突的概率会比较大，因此对于加锁过程中会做很多的操作</p><p>举个例子：同学A与同学B中午下课后都想去食堂吃饭</p><p>同学A认为：现在才刚下课，如果我走快点就可以赶在大家前面吃上饭，这样别人就抢不过我了，因此同学A会直接赶往食堂（没有加锁，直接访问资源），如果这会食堂人确实不多，那么可以直接吃上饭，但是如果这时食堂人很多，那么A同学就会先回寝室休息一下再来食堂吃饭（虽然没有加上锁，但是可以识别出数据冲突），这个是乐观锁</p><p>同学B认为：现在正是下课的时候，等我过去的时候食堂可能人已经非常多了，我大概率得排长时间的队，因此同学B会先打电话咨询食堂阿姨：“现在食堂人多不多呀？”如果发现人不多同学B就可以前往食堂，反之同学B就会先等待一会，之后在确定时间，这就是悲观锁。</p><p>注意：这里两种方式优劣不能一概而论</p><ol><li><p>如果现在食堂确实人很多，那么悲观锁的策略更合适，如果采用乐观锁会导致“多跑很多趟”，浪费资源</p></li><li><p>如果现在食堂人不多，那么乐观锁的策略比较合适，而悲观锁会降低效率。</p></li></ol><h3 id="重量级锁和轻量级锁"><a href="#重量级锁和轻量级锁" class="headerlink" title="重量级锁和轻量级锁"></a>重量级锁和轻量级锁</h3><p>首先我们需要知道锁的“原子性”特征的由来：</p><ul><li>底层硬件CPU提供原子操作指令</li><li>操作系统依据原子指令，实现互斥锁mutex</li><li>JVM在操作系统提供的mutex的基础上，实现了synchronized和ReentranLock等关键字和类</li></ul><p><a href="https://www.imagehub.cc/image/image.bvTCjo"><img src="https://s1.imagehub.cc/images/2024/09/05/be7096adb421956cf7b16d84b324d9c4.png" alt="image"></a></p><p><strong>重量级锁</strong>：加锁机制重度依赖OS提供的mutex</p><ul><li>大量用户态与内核态的切换</li><li>容易引发线程调度</li></ul><p><strong>轻量级锁</strong>：加锁机制尽可能不使用mutex锁，而是尽量在用户态中完成，实在不行借助mutex</p><ul><li>少量用户态与内核态的切换</li><li>不容易发生线程调度问题</li></ul><h3 id="自旋锁和挂起等待锁"><a href="#自旋锁和挂起等待锁" class="headerlink" title="自旋锁和挂起等待锁"></a>自旋锁和挂起等待锁</h3><p><strong>自旋锁（Spin Lock）</strong>：按照之前的方式，线程在竞争锁失败的情况下就会进入阻塞状态，放弃被CPU调度，过了一段时间才能被CPU调度，但是有时候虽然竞争锁失败，但是锁很快就会被释放，就没必要放弃CPU，这个时候就可以使用自旋锁来处理这样的场景。</p><p>自旋锁伪代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (竞争锁(lock) == 失败) &#123;&#125;</span><br></pre></td></tr></table></figure><p>上述伪代码中我们可以看出自旋锁的实现思路：如果线程获取锁失败，立即再次尝试获取锁，直到获取成功为止，一旦锁被其他线程释放就很容易获取锁。</p><p>理解自旋锁 VS 挂起等待锁</p><p>假设下课五分钟时间，你此时准备上厕所，但是坑位被占了，你发现此时那个人正在冲水，你预估他马上就要出来了，就一直站在坑位前面等待，此时只要里面的人出来，你就立马可以抢占坑位，这就是自旋锁。</p><p>如果是挂起等待锁，那么你需要离开一段时间，等到上课铃响后再进去，这时可能坑位已经被很多个人占过了</p><p>自旋锁是一种很经典的轻量级锁实现方式：</p><ul><li>优点：没有放弃CPU，不涉及线程阻塞以及调度，一旦锁被释放很容易第一时间获取到锁</li><li>缺点：如果锁对象被其他线程持有时间过长，那么就会持续的消耗CPU资源</li></ul><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p>考虑这样一个场景：线程A、B、C尝试获取同一锁对象，A成功获取到锁对象，此时线程B来了，进入阻塞等待状态，又过了一会C线程来了，进入阻塞等待状态，如果此时锁被释放之后，B线程和C线程谁会获取到锁对象呢？</p><p><strong>公平锁</strong>：遵守“先来后到的原则”，B比C先来，因此B线程先与C线程获取到锁</p><p><strong>非公平锁</strong>：不遵守“先来后到的原则”，B和C都有可能获取到锁</p><p>注意：</p><ul><li>操作系统内部的线程调度策略可以认为是随机的，如果不做任何额外的限制，实现的就是“非公平锁”，如果想要实现“公平锁”，就需要借助额外的数据结构，来记录线程的先后顺序</li><li>公平锁和非公平锁也没有优劣之分，适用于不同的场景</li></ul><h3 id="可重入锁和不可重入锁"><a href="#可重入锁和不可重入锁" class="headerlink" title="可重入锁和不可重入锁"></a>可重入锁和不可重入锁</h3><p>可重入锁：允许同一个线程对象多次获取同一把锁</p><p>不可重入锁：不允许同一个线程对象多次获取同一把锁</p><p>理解如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次加锁, 加锁成功</span></span><br><span class="line"><span class="keyword">synchronized</span>(locker) &#123;</span><br><span class="line">   <span class="comment">// 第二次加锁, 加锁成功</span></span><br><span class="line">   <span class="keyword">synchronized</span>(locker) &#123;</span><br><span class="line">       <span class="comment">//TODO...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Java的synchronized就是可重入锁，内部会依靠一套计数器机制，判断如果当前锁对象被当前线程持有，那么再次加锁不会发生死锁现象。除此以外，Java中的以Reentran开头的锁均为可重入锁。</p><p>如果是不可重入锁执行以上的代码，此时线程获取锁对象之后尝试再次获取该锁对象，由于此时锁对象已经被其他线程占有（就是线程本身），所以线程会进入阻塞等待，此时就发生了死锁！</p><h3 id="普通互斥锁和读写锁"><a href="#普通互斥锁和读写锁" class="headerlink" title="普通互斥锁和读写锁"></a>普通互斥锁和读写锁</h3><p>在多线程的场景下，数据的读取方之间不会发生线程安全问题，但是数据的写入方之间以及与读取方之间都需要进行互斥，但是各种场景都采用一种锁就会产生不必要的性能消耗，读写锁应运而生。</p><p><strong>读写锁</strong>：见名知意，读写锁即需要在加锁的时候表明读写意图，读者之间并不互斥，但是写者和写着者以及读者和写者之间需要进行互斥</p><ul><li>两个线程都只是读取一个数据，没有线程安全问题，不需要进行互斥</li><li>两个线程写同一个数据，可能引发线程安全问题，需要进行互斥</li><li>一个线程读数据，一个线程写数据，可能存在线程安全问题，需要进行互斥</li></ul><h2 id="synchronized原理"><a href="#synchronized原理" class="headerlink" title="synchronized原理"></a>synchronized原理</h2><p>结合上面的锁策略，我们可以总结出，synchronized具有以下特性（JDK1.8）</p><ol><li><p>一开始是乐观锁，若锁冲突频繁，会切换为悲观锁</p></li><li><p>一开始是轻量级锁，如果需要频繁使用到mutex，就切换为重量级锁</p></li><li><p>一开始是自旋锁，如果锁被线程占用时间长就切换为挂起等待锁</p></li><li><p>是一种非公平锁</p></li><li><p>是一种非读写锁</p></li><li><p>是一种可重入锁</p></li></ol><h3 id="加锁升级工作过程"><a href="#加锁升级工作过程" class="headerlink" title="加锁升级工作过程"></a>加锁升级工作过程</h3><p>JVM将synchronized锁分为无锁、偏向锁、轻量级锁、重量级锁状态，会根据不同情况依次升级。</p><p><a href="https://www.imagehub.cc/image/image.bvT6yO"><img src="https://s1.imagehub.cc/images/2024/09/05/95e757a6ffbd6fc9995bcd3527a5d562.png" alt="image"></a></p><p>阶段一：偏向锁</p><p>第一个尝试加锁的线程就会优先进入偏向锁阶段，偏向锁不是真正的加锁，而是在锁对象头中做一个“偏向锁标记”，记录这个锁属于哪个线程，如果后续没有其他线程来竞争该锁，那么就省去了加锁解锁过程的开销，如果后续有线程来竞争该锁，因此就依据锁对象头中的“偏向锁标记”，优先让该线程持有锁，此时锁升级为轻量级锁阶段。</p><p>偏向锁本质是一种“懒汉模式”，遵循能不加锁就不加锁，能晚加锁就晚加锁的原则</p><p>阶段二：轻量级锁</p><p>随着其他线程进入竞争，偏向锁状态被解除，进入轻量级锁阶段（自旋锁实现）此处的自旋锁依据CAS实现</p><ul><li>通过CAS检查并更新一块内存（null &#x3D;&gt; 该线程引用）</li><li>如果更新成功，认为加锁成功</li><li>如果更新失败，继续自旋式等待（不放弃CPU）</li></ul><p>阶段三：重量级锁</p><p>如果线程竞争进一步激烈，自旋方式无法立即获取到锁，就会升级为重量级锁。此处的重量级锁就是依赖操作系统内核提供的mutex锁</p><h3 id="锁消除策略"><a href="#锁消除策略" class="headerlink" title="锁消除策略"></a>锁消除策略</h3><p>JVM帮我们在synchronized内部进行了优化，可以在一定情况下帮我们消除不必要的锁</p><p>来分析如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">sBuffer.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">sBuffer.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">sBuffer.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">sBuffer.append(<span class="string">&quot;d&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时由于StringBuffer对象是线程安全的，但是在单线程运行环境下，这些加锁解锁操作完全没有必要，因此编译器就会帮我们省去这些锁</p><p>注意：synchronized消除锁的策略是比较保守的，明显不会发生线程安全问题的代码才会消除锁，例如：</p><ul><li>变量只涉及局部变量，没有全局变量</li><li>多个线程只对变量做读取操作，不涉及修改操作</li></ul><h3 id="锁粗化策略"><a href="#锁粗化策略" class="headerlink" title="锁粗化策略"></a>锁粗化策略</h3><p>如果在同一段代码逻辑中，多次频繁的加锁解锁操作，编译器和JVM会帮助我们将其合并为一次加锁解锁操作</p><p><a href="https://www.imagehub.cc/image/image.bvTztd"><img src="https://s1.imagehub.cc/images/2024/09/05/c6cc59f41a69ef3791784ceb1fcb1f66.png" alt="image"></a></p><p>如上图所示，当一段逻辑代码中涉及多个细粒度的锁，JVM和编译器就会将其优化为一个粗粒度的锁，在实际开发的过程中，使用细粒度的锁是希望一个线程使用完锁后释放锁，另外的线程可以使用以此加快效率，但是当没有别的线程使用时，就会优化成粗粒度的锁，省去了频繁加锁解锁的额外开销。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程案例】-线程池</title>
      <link href="/2023/12/06/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B%E3%80%91-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2023/12/06/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B%E3%80%91-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池引入的原因"><a href="#线程池引入的原因" class="headerlink" title="线程池引入的原因"></a>线程池引入的原因</h2><p>Java编程世界中是不鼓励多进程编程模式的，因为进程频繁创建与销毁带来了巨大的开销，线程作为轻量级的进程可以有效缓解此问题，但是现在随着线程数目的增多，所带来的的开销也不可忽略！解决的策略有如下两种：</p><ol><li>创建轻量级的线程，又被称为协程&#x2F;纤程（即Java21引入的虚拟线程）</li><li>使用线程池管理线程，减少启动销毁线程的开销</li></ol><p>因此我们此处引入线程池的目的就是有效减少频繁创建线程、销毁线程的带来的开销。</p><p>线程池的实现思路：</p><ul><li>提前准备好多个线程存放到线程池中</li><li>若添加任务，则直接使用线程池中的线程完成该任务，无需再创建线程</li><li>任务执行完毕后，无需将线程销毁，该线程仍交由线程池进行管理</li></ul><h2 id="Java线程池的参数介绍"><a href="#Java线程池的参数介绍" class="headerlink" title="Java线程池的参数介绍"></a>Java线程池的参数介绍</h2><p>JVM实现了对线程池的支持，JavaAPI提供了一个线程池实现类ThreadPoolExecutor，其中我们需要了解该类的构造方法中的参数，这对于我们理解线程池该数据结构具有一定意义。</p><p>我们从上述官方文档中可以抽取出核心的参数：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>最大核心线程数</td></tr><tr><td>int maximumPoolSize</td><td>最大线程数</td></tr><tr><td>long keepAliveTime</td><td>线程数存活时间</td></tr><tr><td>TimeUnit unit</td><td>keepAliveTime的单位</td></tr><tr><td>BlockingQueue workQueue</td><td>阻塞队列（存放缓存任务）</td></tr><tr><td>RejectedExecutionHandler</td><td>拒绝执行处理器</td></tr></tbody></table><p>下面我们将对各个参数的含义做出解释：</p><p><strong>corePoolSize</strong>：表示该线程池中的核心线程数目的最大值</p><p><strong>maximumPoolSize</strong>：表示该线程池中线程数目的最大值</p><p><strong>workQueue</strong>：用户缓存任务的阻塞队列</p><p>我们通过向线程池中添加任务来说明三者之间的关系</p><p>(1) 如果此时没有线程空闲并且线程数小于corePoolSize，那么就添加新的线程并由该线程处理该任务</p><p>(2) 如果此时没有线程空闲，且当前线程数等于corePoolSize，但是阻塞队列workQueue此时未满，那么就将该任务添加到阻塞队列中，等到核心线程空闲时进行处理，不添加新的线程。</p><p>(3) 如果此时没有线程空闲，并且阻塞队列已经满了，但是线程数目小于maximumPoolSize，此时就添加新的线程执行任务</p><p>(4) 如果此时没有线程空闲，且阻塞队列已满，且池中线程数等于maximumPoolSize，此时则根据RejectedExecutionHandler指定的策略拒绝</p><p>我们举个生动形象的栗子：</p><p>一个公司正常运转，①情景一：如果此时来了一个任务，但是公司员工都处于繁忙状态中，此时老板发现正式工还没有招满，于是老板就招了一个正式工来完成这个任务。此时这个正式工就是核心线程。②情景二：此时又来了一个新的任务，但是此时正式员工已经招满了并且均处于忙碌状态。于是老板决定先将该任务搁置写在备忘录上，这个备忘录就是workQueue，等到正式员工有人忙完手头上的工作时，老板就可以将备忘录上的任务指派给他。③情景三：但是到了年底，正式工满员且都非常忙碌，备忘录上的清单都快列不下了，老板一看不行呀，就招了几个临时工来完成任务，这些临时工就是临时线程。</p><p><strong>keepAliveTime</strong>：表示空闲线程的存活时间</p><p><strong>unit</strong>：表示keepAliveTime的单位</p><p>我们继续在上述案例的基础上解释这两个参数的实际含义，接上文老板招了几个临时工完成任务，此后没有新增任务，随着员工各自处理完了手头上的工作。一定有员工闲下来了，但是老板为了节省成本想辞退空闲的员工，但是又担心之后任务是否又会激增，于是老板想了一个策略，若员工空闲时间超过了keepAliveTime就辞退该员工。</p><p><strong>ThreadFactory</strong>：指定创建线程的工厂（工厂模式）</p><p><strong>RejectedExecutorHandler</strong>：指定拒绝策略</p><p>为了解释RejectedExecutionHandler的含义，我们在上述案例的基础上扩展新的情景：</p><p>此时公司的员工数目已达上限（正式员工+临时工），并且此时备忘录也存放不下了，此时又来了新的任务，老板只能含泪拒绝执行该任务。但是拒绝是一门艺术，如何采用拒绝的策略是有讲究的</p><table><thead><tr><th>策略</th><th>含义</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy()</td><td>抛出RejectedExecutionException异常</td></tr><tr><td>ThreadPoolExector.CallerRunsPolicy()</td><td>由提交任务的线程处理该任务</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy()</td><td>抛弃当前任务</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy()</td><td>抛弃最先提交但仍未执行的任务</td></tr></tbody></table><p>其中AbortPolicy抛出异常，由开发人员针对实际情况进行处理，CallerRunsPolicy表示该任务线程池不进行处理，交由提交线程的任务进行处理，DiscardPolicy表示线程池按照原来的策略进行指定，新任务丢弃不处理，DiscardOldestPolicy表示线程池处理新任务，但是从原来任务中取出最先提交但是并未执行的任务选择抛弃它</p><h2 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h2><p>在1.2中我们提到Java提供了线程池的实现类ThreadPoolExecutor，但是我们还是习惯上使用Executors该类作为线程池，该类实际上是对ThreadPoolExecutor的再次封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建内置4个线程的线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 2. 向线程池提交任务</span></span><br><span class="line">        executorService.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是一个任务....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中使用步骤如下：</p><ol><li>创建Executors线程池对象</li></ol><ul><li>Executors.newSingleThreadPool：创建带有单个线程的线程池</li><li>Executors.newFixedThreadPool：创建指定线程数目的线程池</li><li>Executors.newCachedThreadPool：创建可以动态扩容的线程池</li><li>Executors.newScheduledThreadPool：创建延时执行功能的线程池</li></ul><ol start="2"><li><p>得到ExecutorService对象</p></li><li><p>通过ExecutorService.submit可以注册一个任务到线程池中</p></li></ol><h2 id="模拟实现线程池"><a href="#模拟实现线程池" class="headerlink" title="模拟实现线程池"></a>模拟实现线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThreadPoolExecutor</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nThreads; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="comment">// 从阻塞队列中获取任务并执行</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Runnable</span> <span class="variable">top</span> <span class="operator">=</span> blockingQueue.take();</span><br><span class="line">                            top.run();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> runnable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.blockingQueue.put(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中我们模拟实现了一个线程池对象</p><p>实现步骤如下：</p><ul><li>内置属性BlockingQueue<Runnable>阻塞队列用来缓存任务</li><li>构造方法我们创建了nThread数量的线程，并且执行run方法，我们让每个线程不断扫描阻塞队列，取出队头元素并执行其中的方法，由于阻塞队列BlockingQueue是线程安全并且带有阻塞功能，所以我们无需手动加锁，也无需判断队列是否为空</li><li>submit方法是用来提交任务的，该方法将提交的任务放入阻塞队列中，由于阻塞对象是线程安全并且带有阻塞功能的，所以这里也无需担心队列满的情况，也不用手动加锁。</li></ul><p>测试上述代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolExecutorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建线程池对象</span></span><br><span class="line">        <span class="type">MyThreadPoolExecutor</span> <span class="variable">myThreadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadPoolExecutor</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 2. 添加任务</span></span><br><span class="line">        myThreadPoolExecutor.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是一个任务...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就模拟实现了一个线程池对象</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】线程安全问题</title>
      <link href="/2023/12/03/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/03/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="线程安全的概念"><a href="#线程安全的概念" class="headerlink" title="线程安全的概念"></a>线程安全的概念</h2><p><strong>线程安全</strong>：如何给出一个关于线程安全的概念是十分困难的，但是我们可以这样来理解，即在多线程模式下、相同代码运行得出的结果一定是一致无误且符合预期的，并与在单线程运行结果下一致，我们则认为这个程序是线程安全的。</p><h2 id="演示线程安全问题"><a href="#演示线程安全问题" class="headerlink" title="演示线程安全问题"></a>演示线程安全问题</h2><p>下面我们来演示一个经典的会引发线程安全的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;count变量的值是：&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这里的join()方法是确保线程t1、t2都执行完毕才会在主线程中打印变量count的值</p><p>从这段代码中我们可以我们定义了一个静态成员变量count初始化为0，我们希望线程t1执行10000次count++，同理线程t2也执行10000次count++，我们预估最后count变量的值应该是20000，可是结果真如我们所预料的这样吗？</p><p><a href="https://www.imagehub.cc/image/image.bvEq0g"><img src="https://s1.imagehub.cc/images/2024/09/04/e93fef779bc8c27f4a99e24f782d06ff.png" alt="image"></a></p><p>控制台输出结果为14048，事实上每次运行的最终结果还不一样！这就非常的苦恼了，我们接下来就会分析引发线程安全问题的原因。</p><h2 id="线程安全问题原因"><a href="#线程安全问题原因" class="headerlink" title="线程安全问题原因"></a>线程安全问题原因</h2><h3 id="抢占性调度（随机执行）"><a href="#抢占性调度（随机执行）" class="headerlink" title="抢占性调度（随机执行）"></a>抢占性调度（随机执行）</h3><p>可以说导致线程安全的罪魁祸首就是操作系统中抢占式调度这种随机执行策略。倘若每一个线程执行的顺序都事先被规定好那么就不会引发线程安全问题，但是随机执行就会带来很多变数，进而引发线程安全问题。</p><h3 id="多个线程修改共享数据"><a href="#多个线程修改共享数据" class="headerlink" title="多个线程修改共享数据"></a>多个线程修改共享数据</h3><p>引发线程安全的其中一个条件就是必须存在多线程运行环境，试想如果只有一个线程那么与我们之前所编写的单线程环境是一致的，结果也不会出现不一致的情况。引发线程安全的另外一个原因就是存在多个线程想要访问一块共享空间的数据并涉及修改操作，就可能引发线程安全问题。以我们刚才的演示为例，其中类静态成员变量count由于匿名内部类可以访问外部类成员的机制，可以被线程t1、t2同时访问，并且由于涉及count++等修改操作，则可能引发线程问题。</p><h3 id="修改操作非原子性"><a href="#修改操作非原子性" class="headerlink" title="修改操作非原子性"></a>修改操作非原子性</h3><p>原子性：先来谈一谈原子性的概念，原子性是指无法再分的最小单位，在此处就是计算机执行代码以指令作为单位，由CPU进行取指令、解析指令、执行指令进行操作。</p><p>需要注意的是一条Java语句包含多个指令，以上述演示的count++为例，就包含以下三个指令</p><ul><li>load：把内存中的count数据读取到寄存器中</li><li>add：将寄存器中的数据进行+1操作再写回到寄存器中</li><li>save：将寄存器中的数据写回到内存</li></ul><p>此时可以明确的指出我们的示例代码正是非原子性操作，问题就出在count++上，那么可能引起的效果就如下图所示：</p><p><a href="https://www.imagehub.cc/image/image.bvE5jo"><img src="https://s1.imagehub.cc/images/2024/09/04/f3870c46fd56a6b598aeb6a7c19d19f6.png" alt="image"></a></p><p>一开始有线程t1持有CPU并执行指令load、add完成了从内存中读取count值为0并在寄存器中完成加法操作，在将结果写会内存之前就被CPU调度走了，线程t2从内存中读取count值仍旧为0！！！此时完整执行count++三条指令将结果1写回内存。此时t1又重新被CPU调用继续执行，再将原来寄存器中的值1写回内存。这里我们就可以发现问题所在，原先预先的结果2由于抢占式调度策略和非原子性就导致了数据的不一致性，进而引发线程安全问题。</p><h2 id="线程安全问题的解决—引入synchronized"><a href="#线程安全问题的解决—引入synchronized" class="headerlink" title="线程安全问题的解决—引入synchronized"></a>线程安全问题的解决—引入synchronized</h2><p>我们先来看一下如何利用synchronized解决上述案例的线程安全问题，然后再来着重介绍synchronized的使用方式以及注意点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;count变量的值是：&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized关键字就是Java中提供的监视器锁（Monitor lock）我们接下来就会详细介绍有关synchronized的使用方式以及特性</p><h2 id="synchronized介绍"><a href="#synchronized介绍" class="headerlink" title="synchronized介绍"></a>synchronized介绍</h2><p><strong>互斥性</strong></p><p>synchronized能够起到线程互斥的效果，某个线程执行到synchronized代码块时，其他线程如果也执行到同一个对象synchronized就会阻塞等待</p><ul><li>进入synchronized代码块中，相当于加锁</li><li>退出synchronized代码块当中，相当于解锁</li><li>进入由synchronized修饰的方法当中，相当于加锁</li><li>退出由synchronized修饰的方法当中，相当于解锁</li></ul><p>如何理解“加锁解锁中的阻塞等待”：</p><p>针对于同一把锁，如果一个线程已经获取这个锁对象，操作系统会维护一个阻塞等待队列，如果别的线程想要获取同一把锁，就需要进入阻塞队列进行等待，直到持有锁的线程执行完毕释放锁，操作系统会根据线程调度模块选择一个线程获取锁对象。</p><p>上一个持有锁的线程解锁后，并不是下一个线程立马就可以执行，这期间需要经过操作系统模块经过线程调度策略选择一个线程并进行“唤醒操作”。<br>假如线程A获取了锁对象，B、C线程都进入阻塞等待队列，但是尽管B先于C进入阻塞等待队列，但是并不意味着B之后会优先获得锁对象，B、C线程仍旧需要进行竞争，不遵循“先来后到”原则。</p><p><a href="https://www.imagehub.cc/image/image.bvGnds"><img src="https://s1.imagehub.cc/images/2024/09/04/ab3e8a8441eba82f2e4dfdf6be6f44ac.png" alt="image"></a></p><p><strong>可重入性</strong></p><p>Java中的synchronized“加锁解锁”机制是可重入的，来看下面这个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照上述阻塞等待机制来理解，我们或许会认为当进入第一个synchronized代码块时会获取锁对象，此时指定到第二个synchronized代码块，需要进入阻塞等待队列，因此这个代码不会输出任何结果进入死锁状态！实则不然，因为synchronized是可重入机制的，因此多个synchronized不会导致死锁现象的发生！</p><p>Java可重入锁实现：（线程持有者+计数器机制）</p><p>下面我们来分析Java是如何利用判断线程持有者和计数器实现的可重入锁</p><ul><li>初始化计数器变量为0、线程持有者</li><li>进入第一个synchronized代码块内部，线程持有者更改为线程t</li><li>进入第二个synchronized代码块内部，比较当前线程与线程持有者，发现一致则计数器+1</li><li>退出第二个synchronized代码块内部，计数器值-1</li><li>退出第二个synchronized代码块内部，此时计数器为0，线程持有者释放锁</li></ul><p><strong>synchronized使用示例</strong></p><ol><li><p>synchronized修饰普通方法：锁对象为当前类的实例（this）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span> <span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized修饰静态方法：锁对象为当前类的类对象（Class）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized代码块：锁对象需手动指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意：我们重点需要理解，synchronized锁的是什么对象，只有不同的线程想要获取同一个锁对象才会出现锁冲突竞争。</p><h2 id="内存可见性（volatile关键字）"><a href="#内存可见性（volatile关键字）" class="headerlink" title="内存可见性（volatile关键字）"></a>内存可见性（volatile关键字）</h2><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (inner.count == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;循环结束&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">            inner.count = scanner.nextInt();</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的预期效果如下：</p><ul><li>线程t1中判断内部类inner属性count的值是否为0，如果为0则保持死循环，否则退出循环并打印循环结束</li><li>线程t2中让用户输入一个数，将此值赋值给内部类变量count</li><li>预期结果就是t2线程中用户输入非0值，t1线程退出循环并打印循环结束终止</li></ul><p>但是实际运行效果如下：</p><p><a href="https://www.imagehub.cc/image/image.bvGK3j"><img src="https://s1.imagehub.cc/images/2024/09/04/3d4c1e76fb8b8b1f10f536cd4034d574.png" alt="image"></a></p><p>没错，t1线程依旧没有结束，这就是大名鼎鼎的内存可见性问题！在上面的描述中解释过内存可见性涉及编译器优化：其实Java编译器会做一件事，会在不影响代码逻辑的前提下对代码进行优化调整，但是这种策略在多线程编程模式下就会带来内存可见性问题：</p><ul><li>我们虽然同时启动线程t1、t2，但是t2线程中由于存在输入等长时间的IO操作，因此实际上在我们输入完之后线程t1已经执行相当多次while循环</li><li>但是所有的while循环判断结果都是count值为0，while循环体也不涉及修改等操作，并且获取count的值需要经过访存操作，这对于CPU调度是非常耗时的，于是编译器优化方式就是通过寄存器或者缓存将内存中的count值拷贝了一份</li><li>但是若干秒后t2线程用户输入整数后改变了内存中count的值</li><li>此时t1线程仍旧会从三级缓存或者寄存器中读取count的值此时值依旧为0，所以t1线程中仍旧处于死循环。</li></ul><p>volatile关键字的作用：</p><ul><li>解决内存可见性问题（让每次读取指定变量值都从内存中读取）</li><li>解决指令重排序问题（后续再解释）</li></ul><p>解决代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (inner.count == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;循环结束&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">            inner.count = scanner.nextInt();</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】线程状态</title>
      <link href="/2023/12/02/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2023/12/02/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Java线程状态概述"><a href="#Java线程状态概述" class="headerlink" title="Java线程状态概述"></a>Java线程状态概述</h2><p>我们可以通过Java内部提供的枚举类型Thread.State，查看所有的Java线程状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Thread.State state : Thread.State.values()) &#123;</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下图所示：</p><p><a href="https://www.imagehub.cc/image/image.bvfxqk"><img src="https://s1.imagehub.cc/images/2024/09/03/0c9b5bb7ee51959151f1143d80d6d99a.png" alt="image"></a></p><ul><li>NEW：表示线程处于新建状态，但是仍未开始执行任务（调用start方法之前）</li><li>RUNNABLE：表示线程处于已就绪状态，此时线程正处于CPU上调度或者可以随时被CPU调度</li><li>BLOCKED：表示当前线程由于锁竞争处于阻塞等待状态</li><li>WAITING：表示当前线程处于阻塞等待状态</li><li>TIMED_WATING：表示当前线程处于带有时限的阻塞等待状态（超时等待）</li><li>TERMINATED：表示当前线程任务完成，处于终止状态（run方法执行完毕）</li></ul><h2 id="Java线程状态图"><a href="#Java线程状态图" class="headerlink" title="Java线程状态图"></a>Java线程状态图</h2><p><a href="https://www.imagehub.cc/image/image.bvfE36"><img src="https://s1.imagehub.cc/images/2024/09/03/4ae6449987781e06aad75e24c245d264.png" alt="image"></a></p><p>上图描述的就是Java中的线程状态模型，可以概括线程的生命周期。下面我们举一个生动形象的生活案例来解释每个状态所表示的含义：</p><p>考虑这样一个场景：中午到了饭点了，你和大伙一起去食堂吃饭。这时每一个窗口都只有一位食堂阿姨为同学们打饭，你到达你最喜欢的烤肉饭窗口发现前方已经有很多同学都在排队了，礼貌懂事的你自觉的到队列尾部进行排队。此时就是一个多线程模型，下面将解释此背景中各种状况及对应的线程状态。</p><ul><li>NEW：你此时正处于前往食堂的路上，你知道自己要去吃饭，但是并不能立马吃上（已经分配任务，但是无法被CPU调度）</li><li>RUNNABLE：此时你羡慕的望着队头正在点菜的同学，这个线程可以或是正在被CPU调度（处于就绪状态）</li><li>TIME_WAITED | WAITED：此时饭菜卖完了，后勤正在进行补给当中，同学们需要进行等待（阻塞等待状态）</li><li>BLOCKED：排队过程中，你看到有两位同学因为竞争一双筷子起了冲突，此时筷子可以看作锁对象，持有筷子的一方就是持有锁对象，另一方由于锁冲突需要阻塞等待（锁冲突导致的阻塞等待）</li><li>TERMINATED：最后的最后，你终于吃上你心爱的烤肉饭了，此时你吃饭的任务已经完成（处于终止状态）</li></ul><h2 id="观察线程状态的切换"><a href="#观察线程状态的切换" class="headerlink" title="观察线程状态的切换"></a>观察线程状态的切换</h2><h3 id="观察NEW、RUNNABLE、TERMINATED状态切换"><a href="#观察NEW、RUNNABLE、TERMINATED状态切换" class="headerlink" title="观察NEW、RUNNABLE、TERMINATED状态切换"></a>观察NEW、RUNNABLE、TERMINATED状态切换</h3><p>使用getState方法获取线程的运行状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前t线程状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前t线程状态：&quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line">        t.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前t线程状态：&quot;</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><a href="https://www.imagehub.cc/image/image.bvfTfU"><img src="https://s1.imagehub.cc/images/2024/09/03/53eb09fdd4e3c43968846fe905a7b139.png" alt="image"></a></p><h3 id="观察WAITING、TIMED-WAITING、BLOCKED状态切换"><a href="#观察WAITING、TIMED-WAITING、BLOCKED状态切换" class="headerlink" title="观察WAITING、TIMED_WAITING、BLOCKED状态切换"></a>观察WAITING、TIMED_WAITING、BLOCKED状态切换</h3><p>通过jconsole工具获取线程状态</p><p>&#96;&#96;&#96;java<br>public class ThreadDemo19 {</p><pre><code>private static Object obj = new Object();public static void main(String[] args) &#123;    Thread t1 = new Thread(() -&gt; &#123;        synchronized (obj) &#123;            while (true) &#123;                try &#123;                    Thread.sleep(1000);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;);    t1.start();    Thread t2 = new Thread(() -&gt; &#123;       synchronized (obj) &#123;           System.out.println(&quot;我好想要执行...&quot;);       &#125;    &#125;);    t2.start();&#125;</code></pre><p>}</p><p>通过jconsole工具可以查看线程此时的状态：Thread-0处于超时等待状态，Thread-1处于BLOCKED状态</p><p>这是因为线程Thread-0先被执行并且进入synchronized代码块中，获得锁对象并调用Thread.sleep(long millis)方法处于线程休眠超时等待状态，线程Thread-1由于争夺同一个锁对象，但是此时锁对象被Thread-0获取，处于BLOCKED状态</p><p><a href="https://www.imagehub.cc/image/image.bvf2gb"><img src="https://s1.imagehub.cc/images/2024/09/03/14f9d7b23b260f6d86c55c34d9d2141a.png" alt="image"></a></p><p>如果将代码稍加修改，让Thread-0中执行sleep(long millis)方法改成wait()此时线程Thread-0的状态就是WAITING状态：</p><p><a href="https://www.imagehub.cc/image/image.bvf7RT"><img src="https://s1.imagehub.cc/images/2024/09/03/0e7408a1c237a1c119821b3de52e72bb.png" alt="image"></a></p><p>此时Thread-0线程执行wait()方法后做了以下三件事：①、释放当前锁 ②、处于阻塞等待状态 ③、直到别的线程唤醒则继续执行。但是没有别的线程唤醒该线程于是一直处于WAITING状态。</p><p>小节：</p><ul><li>BLOCKED 表示等待获取锁, WAITING 和 TIMED_WAITING 表示等待其他线程发来通知.</li><li>TIMED_WAITING 线程在等待唤醒，但设置了时限; WAITING 线程在无限等待唤醒</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java多线程】线程的基本使用</title>
      <link href="/2023/12/01/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/12/01/%E3%80%90Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><h3 id="创建方式1—继承Thread类"><a href="#创建方式1—继承Thread类" class="headerlink" title="创建方式1—继承Thread类"></a>创建方式1—继承Thread类</h3><p>我们可以通过以下三个步骤通过继承Thread类的方式创建分线程</p><ol><li><p>创建类继承Thread类并重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是通过继承Thread类创建的分线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建MyThread类的实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建线程实例</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建方式2—实现Runnable接口"><a href="#创建方式2—实现Runnable接口" class="headerlink" title="创建方式2—实现Runnable接口"></a>创建方式2—实现Runnable接口</h3><p>第二种创建线程的方式就是实现Runnable接口并重写run方法，可以通过以下步骤实现</p><ol><li><p>创建Runnable接口实现类，并重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是通过实现Runnable接口创建的分线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Thread类实例，并传入Runnable接口实现类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Runnable实现类对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="comment">// 2. 创建出Thread类实例</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li><li><p>创建方式3—继承Thread类（匿名内部类）</p></li></ol><p>我们可以使用继承Thread类的方式创建线程，但是使用匿名内部类更加简便。</p><p>下面是实现步骤：</p><ol><li><p>通过匿名内部类的方式创建Thread实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Thread实例</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是通过实现继承Thread类（匿名内部类）创建的分线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建方式4—实现Runnable接口（匿名内部类）"><a href="#创建方式4—实现Runnable接口（匿名内部类）" class="headerlink" title="创建方式4—实现Runnable接口（匿名内部类）"></a>创建方式4—实现Runnable接口（匿名内部类）</h3><p>我们可以使用实现Runnable接口的方式创建线程，但是使用匿名内部类更加简便。</p><p>下面是实现步骤：</p><ol><li><p>创建Thread实例，通过匿名内部类的方式传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Thread实例（匿名内部类）</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是通过实现Runnable接口（匿名内部类）创建的分线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建方式5—实现Runnable接口（lambda表达式）"><a href="#创建方式5—实现Runnable接口（lambda表达式）" class="headerlink" title="创建方式5—实现Runnable接口（lambda表达式）"></a>创建方式5—实现Runnable接口（lambda表达式）</h3><p>上述四种方式我们并不常用，使用lambda表达式可以更加简单高效</p><p>实现步骤如下：</p><ol><li><p>创建Thread实例，通过lambda表达式传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Thread实例（lambda表达式）</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是通过实现Runnable接口（lambda表达式）创建的分线程&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure></li></ol><h2 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h2><h3 id="Thread类的常用构造方法"><a href="#Thread类的常用构造方法" class="headerlink" title="Thread类的常用构造方法"></a>Thread类的常用构造方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Thread()</td><td>创建线程对象</td></tr><tr><td>Thread(String name)</td><td>创建线程对象并命名</td></tr><tr><td>Thread(Runnable target)</td><td>使用Runnable实现类对象创建线程对象</td></tr><tr><td>Thread(Runnable target, String name)</td><td>使用Runnable实现类对象创建线程对象，并命名</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的名字是：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的名字是：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;线程4&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br></pre></td></tr></table></figure><h3 id="Thread类的常用属性和获取方式"><a href="#Thread类的常用属性和获取方式" class="headerlink" title="Thread类的常用属性和获取方式"></a>Thread类的常用属性和获取方式</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>区分线程的唯一标识符</td></tr><tr><td>name</td><td>线程名称</td></tr><tr><td>state</td><td>线程状态</td></tr><tr><td>priority</td><td>线程优先级</td></tr><tr><td>isAlive()</td><td>判断线程是否存活</td></tr><tr><td>isDaemon()</td><td>判断线程是否是后台进程</td></tr><tr><td>isInterrupted()</td><td>判断线程是否被中断</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我的名字是：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;我的线程ID是：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;我的线程优先级是：&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    System.out.println(<span class="string">&quot;我是否是后台进程：&quot;</span> + Thread.currentThread().isDaemon());</span><br><span class="line">    System.out.println(<span class="string">&quot;我是否被中断：&quot;</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;我现在的线程状态是：&quot;</span> + t.getState());</span><br><span class="line">System.out.println(<span class="string">&quot;线程存活状态：&quot;</span> + t.isAlive());</span><br><span class="line">t.start();</span><br><span class="line">System.out.println(<span class="string">&quot;我现在的线程状态是：&quot;</span> + t.getState());</span><br><span class="line">System.out.println(<span class="string">&quot;线程存活状态：&quot;</span> + t.isAlive());</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><a href="https://www.imagehub.cc/image/image.bvdHNj"><img src="https://s1.imagehub.cc/images/2024/09/03/ce5ff6fd3c2f660400c2abd201711691.png" alt="image"></a></p><h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><p>线程中断不同于操作系统&#x2F;硬件设备中的中断，线程中断指的是通过一些标志位让正在工作状态的线程停止运行（即结束run方法的执行），线程中断我们可以采用如下两种方式实现：</p><ul><li>通过共享的标记进行沟通</li><li>通过线程方法interrupt()进行通知</li></ul><h3 id="通过共享标记变量实现线程中断"><a href="#通过共享标记变量实现线程中断" class="headerlink" title="通过共享标记变量实现线程中断"></a>通过共享标记变量实现线程中断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> flag;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;线程正处于工作中...&quot;</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用interrupt方法实现线程中断"><a href="#使用interrupt方法实现线程中断" class="headerlink" title="使用interrupt方法实现线程中断"></a>使用interrupt方法实现线程中断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程正处于工作中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        t.interrupt(); <span class="comment">// 进行中断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下图所示的运行结果：我们惊奇的发现当线程处于Sleep阻塞时，被中断那么会抛出InterruptedException异常，并且重置了中断标志，总结如下：</p><ol><li><p>让线程因为调用了sleep()、wait()、join()等方法而阻塞被中断时，就会抛出InterruptedException异常，并且重置中断标记，并且是否结束当前线程取决于catch块中的代码实现，可以继续执行线程也可以结束线程。</p></li><li><p>只是内部中断标记被设置，thread可以通过</p></li></ol><ul><li>Thread.interrupted()判断当前线程的中断标记是否被设置，清除中断标志</li><li>Thread.currentThread().isInterrupted()方法来判断线程的中断变量是否被设置，不清除中断标记</li></ul><h3 id="interrupted-方法验证"><a href="#interrupted-方法验证" class="headerlink" title="interrupted()方法验证"></a>interrupted()方法验证</h3><p>使用interrupted()方法验证中断变量是否被清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// System.out.println(&quot;当前中断标记变量：&quot; + Thread.interrupted());</span></span><br><span class="line">                System.out.println(<span class="string">&quot;当前中断标记变量：&quot;</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程等待"><a href="#线程等待" class="headerlink" title="线程等待"></a>线程等待</h2><p>有时候，我们需要等待一个线程执行完毕任务才可以继续执行当前线程的任务，例如说有一对情侣，其中女方想要买一串项链，但是需要1000元，只有丈夫赚够了1000元妻子才可以进行购买。此时妻子线程必须等待丈夫线程赚够1000元才可以继续执行，于是便引入了join方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo13</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> deposit; <span class="comment">// 夫妻共同财产</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">husband</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (deposit &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                deposit += <span class="number">100</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在努力赚钱...当前余额为:&quot;</span> + deposit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;丈夫&quot;</span>);</span><br><span class="line">        husband.start();</span><br><span class="line">        husband.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前余额为：&quot;</span> + deposit + <span class="string">&quot;，妻子可以购买项链！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，husband.join()方法的作用就是让当前线程处于阻塞状态，等待husband线程执行结束后继续执行当前线程的任务</p><p>注意：一般在开发过程中很少使用不带参数的join()方法，因为这是无休止的等待别的线程的执行，下面是join()的一些重载方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void join()</td><td>等待线程结束</td></tr><tr><td>public void join(long millis)</td><td>等待线程结束，最多等millis毫秒</td></tr><tr><td>public void join(long millis, int nanos)</td><td>同理，但是精度更高</td></tr></tbody></table><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><p>线程休眠其实就是sleep()方法，在我们之前的案例中应该都已经使用过了，下面是一个简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo14</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间为：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取线程实例"><a href="#获取线程实例" class="headerlink" title="获取线程实例"></a>获取线程实例</h2><p>这个方法我们也相当的熟悉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程名称：&quot;</span> + t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC理解和使用</title>
      <link href="/2023/09/21/JDBC%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/09/21/JDBC%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC概念及理解"><a href="#JDBC概念及理解" class="headerlink" title="JDBC概念及理解"></a>JDBC概念及理解</h2><p>JDBC：(Java DataBase Connecticity) | Java连接数据库技术</p><p>简单来说，JDBC技术可以让我们在Java程序中指定要执行的SQL语句，通过调用JDBC中特定的方法，将其发送到数据库管理软件（如MySQL、Oracle）并且获取语句的执行结果用于业务逻辑处理，从而实现CURD操作</p><p>JDBC技术是Java中面向接口编程（多态）的一种体现！</p><h2 id="JDBC的使用"><a href="#JDBC的使用" class="headerlink" title="JDBC的使用"></a>JDBC的使用</h2><h3 id="1-JDBC的使用步骤"><a href="#1-JDBC的使用步骤" class="headerlink" title="1. JDBC的使用步骤"></a>1. JDBC的使用步骤</h3><ul><li>将驱动jar包导入到应用环境中来，这里我采用8.0.27版本的驱动程序</li><li>获得连接对象，即建立数据库与java程序之间的通道</li><li>通过连接对象获得传输sql语句以及数据所用的工具</li><li>利用该工具执行所需sql语句以及接收返回的结果集</li><li>解析结果集中的数据内容</li><li>关闭资源</li></ul><h3 id="2-JDBC使用时所需的核心API"><a href="#2-JDBC使用时所需的核心API" class="headerlink" title="2. JDBC使用时所需的核心API"></a>2. JDBC使用时所需的核心API</h3><ul><li>DriverManager对象用来注册指定的驱动，并且获得连接对象connection</li><li>connection对象用来创建传输工具statement</li><li>statement对象用来执行特定sql语句以及返回数据结果集ResultSet</li><li>从结果集ResultSet中解析数据</li><li>释放资源ResultSet、statement、connection</li></ul><h3 id="3-JDBC使用的详细步骤"><a href="#3-JDBC使用的详细步骤" class="headerlink" title="3. JDBC使用的详细步骤"></a>3. JDBC使用的详细步骤</h3><p>第一步，首先我们需要注册相应的驱动，使之应用到我们的环境当中，我们需要借助类DriverManager，这个类有一个静态方法registerDriver(new Driver())，其中需要注意如果是MySQL-JDBC 8+版本以上的，我们需要导入路径为com.mysql.cj.jdbc.Driver的Driver类</p><p>第二步，我们现在需要建立数据库以及java程序之间的连接，在类DriverManager当中有一个getConnection方法，可以建立连接并返回连接对象，这个方法有三个重载的方法，我们首先来关注三个参数的方法</p><ul><li>参数1为url，这个url需要传入特定的格式，格式规范为：jdbc:数据库厂商名:&#x2F;&#x2F;ip地址:端口号&#x2F;数据库名，例如jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;jdbc_test，有了这个url，就可以具体定位到指定ip地址主机上特定端口的应用以及数据库。</li><li>参数2为user，这个参数用来指定连接数据库时所用的账号，这里可以使用root账号进行连接</li><li>参数3为password，这个参数用来指定连接数据库时所用的密码，一般是配置数据库时创建的</li></ul><p>第三步，我们可以通过第二步中获取到的连接对象connection调用方法createStatement()，这个方法可以得到我们在使用步骤中描述的用以传输sql语句以及返回数据结果集的工具对象</p><p>第四步，在第三步中我们可以得到工具对象statement，然后创建所需要执行的SQL语句如SELECT * FROM t_user为sqlStr，然后调用工具对象的方法executeQuery(String sqlStr)就可以传输需要执行的sql语句</p><p>第五步，在第四步中我们可以得到执行sql语句后数据库返回给java程序的结果集ResultSet，我们可以根据结果集解析数据进行业务逻辑的处理</p><p>第六步，我们需要释放资源，上述步骤中的connection、statement、ResultSet都是需要关闭的资源</p><h3 id="4-案例演示"><a href="#4-案例演示" class="headerlink" title="4.案例演示"></a>4.案例演示</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jdbc_test;</span><br><span class="line"></span><br><span class="line">USE jdbc_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> t_user (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;用户主键&#x27;</span>,</span><br><span class="line">ACCOUNT <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">PASSWORD <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">nickname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (ACCOUNT, PASSWORD, nickname) <span class="keyword">VALUES</span> (<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;经理&#x27;</span>), (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;666666&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后在java中编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * description: 1. 注册驱动，引入jar包到应用环境</span></span><br><span class="line"><span class="comment">         * note: 如果为mysql-jdbc8.0以上版本需要引入com.mysql.cj.jdbc.Driver路径</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@params</span>:</span></span><br><span class="line"><span class="comment">         * url: 定格式为jdbc:数据库厂商名/ip:port/数据库名</span></span><br><span class="line"><span class="comment">         * user: 账号</span></span><br><span class="line"><span class="comment">         * password：密码</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc_test&quot;</span>, <span class="string">&quot;你的账号&quot;</span>, <span class="string">&quot;你的密码&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 获得statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 4. 通过statement执行sql语句返回结果集</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">querySql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(querySql);</span><br><span class="line">        <span class="comment">// 5. 解析结果集</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;account&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">nickname</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;nickname&quot;</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;--&quot;</span> + account + <span class="string">&quot;--&quot;</span> + password + <span class="string">&quot;--&quot;</span> + nickname);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 关闭销毁资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>这里的url指定为jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;jdbc_test，127.0.0.1表明ip地址为本机所在ip地址，3306端口号为mysql服务的默认端口号，如果你更改过那么需要按照你更改后的进行设置。</p><p>解析结果集中我们使用while循环判断的方式，next()方法的作用是帮助判断结果集是否还有下一条数据，如果有就进入循环进行处理，如果没有就退出循环，类似于迭代器实现方式。</p><p>我们可以看到输出的结果如下：</p><p><a href="https://www.imagehub.cc/image/image.buldkq"><img src="https://s1.imagehub.cc/images/2024/09/01/cbdcf638fdcb7e330309e6424749a719.png" alt="image"></a></p><h2 id="存在注入攻击的危害与改进"><a href="#存在注入攻击的危害与改进" class="headerlink" title="存在注入攻击的危害与改进"></a>存在注入攻击的危害与改进</h2><p>何谓注入攻击呢？我们通过需求来解释使用statement中存在的问题，进而引出PreparedStatement的优化方式</p><p>需求：根据上述的t_user表，使用jdbc技术完成</p><p>由用户在控制台输入账号密码，与t_user表中的用户信息进行比对，如果存在一致的记录就返回登录成功！否则提示登录失败！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">statementError</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">// 演示statement中注入攻击的危害</span></span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc_test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;QWEzxc123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">// 4. 执行sql语句</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user where account=&#x27;&quot;</span> + account +  <span class="string">&quot;&#x27; AND password=&#x27;&quot;</span> + password + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sqlStr);</span><br><span class="line">        <span class="comment">// 5. 解析结果集</span></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">// 说明有记录</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 关闭资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常使用效果如下：</p><p><a href="https://www.imagehub.cc/image/image.bulfFU"><img src="https://s1.imagehub.cc/images/2024/09/01/a51ef2fb24a8e97d2216a6a9187ef17e.png" alt="image"></a></p><p>因为数据库中是存在这条记录的，所以能够查询到该信息，但是下面将演示一个很有意思的事情，如果我们将账号输入为1，密码输入为1’ OR ‘1’&#x3D;’1会发生什么呢？</p><p><a href="https://www.imagehub.cc/image/image.bul100"><img src="https://s1.imagehub.cc/images/2024/09/01/620c1e7e9c5d81d836a553c510836b3a.png" alt="image"></a></p><p>什么？？？登录成功！但是我们数据库中根本没有这条记录呀</p><p>当我们冷静下来分析SQL语句的执行过程我们就会发现问题所在，上述SQL语句被替换成了select * from t_user where account&#x3D;’1’ AND password&#x3D;’1’ OR ‘1’&#x3D;’1’，其中’1’&#x3D;’1’是恒成立的，所以只要数据库中存在数据就可以查询得到并且登录成功，这一切背后的根源就在于statement只会完成SQL语句的拼写替换操作！所以我们引入了更为安全高效的preparedStatement，从名字就可以看出，这个对象可以事先了解SQL语句的结构，进而做好了校验检查的准备</p><p>使用preparedStatement对象优化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">statementError</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">// 演示statement中注入攻击的危害</span></span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc_test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;QWEzxc123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 编写sql语句</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user where account=? AND password=?&quot;</span>;</span><br><span class="line">        <span class="comment">// 4. 创建preparedStatement</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sqlStr);</span><br><span class="line">        <span class="comment">// 5. 传递动态值</span></span><br><span class="line">        statement.setObject(<span class="number">1</span>, account);</span><br><span class="line">        statement.setObject(<span class="number">2</span>, password);</span><br><span class="line">        <span class="comment">// 6. 执行sql语句</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line">        <span class="comment">// 7. 解析结果集</span></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">// 说明有记录</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8. 关闭资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码中我们可以了解到，创建preparedStatement对象时，先要传递SQL语句，其中动态值使用”?”占位符替代，这样的作用是可以让preparedStatement预先知道SQL语句的结构，下一步就是传递动态值参数，最后执行SQL语句，我们可以总结步骤如下：</p><ul><li>编写SQL语句，其中动态值可以用占位符”?”替代</li><li>使用prepareStatement方法创建PreparedStatement对象，并传递SQL结构字符串</li><li>传递参数给占位符赋值</li><li>执行SQL语句返回结果，注意此时不需要再次传递SQL语句了</li></ul><h2 id="JDBC的扩展使用"><a href="#JDBC的扩展使用" class="headerlink" title="JDBC的扩展使用"></a>JDBC的扩展使用</h2><h3 id="1-主键回显以及获取主键信息"><a href="#1-主键回显以及获取主键信息" class="headerlink" title="1. 主键回显以及获取主键信息"></a>1. 主键回显以及获取主键信息</h3><p>应用场景：当多表查询或者更新时，我们想要获取主表中主键信息，进而对从表进行操作时会遇到主键是自动增长的问题，我们就需要用到主键回显的功能</p><p>在JDBC中preparedStatement对象就类似于传输通道中的工具，我们只需要通知它获取数据时顺便获取主键数据就可以，所以我们可以通过JDBC中preparedStatement一些API帮助我们获取主键信息，需要注意返回的主键是一个ResultSet类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 3. 编写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values(?, ?, ?);&quot;</span>;</span><br><span class="line"><span class="comment">// 4. 创建statement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sqlStr, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"><span class="comment">// 5. 传入动态值</span></span><br><span class="line">statement.setObject(<span class="number">1</span>, <span class="string">&quot;ricejson&quot;</span>);</span><br><span class="line">statement.setObject(<span class="number">2</span>, <span class="string">&quot;QWEzxc&quot;</span>);</span><br><span class="line">statement.setObject(<span class="number">3</span>, <span class="string">&quot;二狗子&quot;</span>);</span><br><span class="line"><span class="comment">// 6. 执行sql语句</span></span><br><span class="line"><span class="type">int</span> <span class="variable">effectedRows</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line"><span class="comment">// 7. 获取主键信息</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.getGeneratedKeys();</span><br><span class="line"><span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-批量插入数据的优化"><a href="#2-批量插入数据的优化" class="headerlink" title="2. 批量插入数据的优化"></a>2. 批量插入数据的优化</h3><p>需求：我们需要向数据库中插入10000条新纪录</p><p>基于目前所学的内容，我们不难写出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试普通批量插入数据耗时</span></span><br><span class="line"><span class="comment">// 1. 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc_test?user=root&amp;password=QWEzxc123456&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 编写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?);&quot;</span>;</span><br><span class="line"><span class="comment">// 4. 创建preparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sqlStr);</span><br><span class="line"><span class="comment">// 5. 占位符赋值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;rice&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;qwe&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;二蛋&quot;</span> + i);</span><br><span class="line">    <span class="comment">// 6. 执行sql语句</span></span><br><span class="line">    preparedStatement.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 普通批量插入10000条数据耗时:24694</span></span><br><span class="line">System.out.println(<span class="string">&quot;普通批量插入10000条数据耗时:&quot;</span> + (endTime - startTime));</span><br><span class="line"><span class="comment">// 7. 关闭资源</span></span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p>但是我们发现此时批量插入数据的耗时之长——24694ms（实际运行时间与平台机器有关）</p><p>所以我们需要学习新的批量插入数据的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量插入数据优化</span></span><br><span class="line"><span class="comment">// 1. 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///jdbc_test?rewriteBatchedStatements=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;QWEzxc123456&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 编写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlStr</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?)&quot;</span>;</span><br><span class="line"><span class="comment">// 4. 获取preparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sqlStr);</span><br><span class="line"><span class="comment">// 5. 占位符赋值e</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    statement.setObject(<span class="number">1</span>, <span class="string">&quot;杰桑&quot;</span> + i);</span><br><span class="line">    statement.setObject(<span class="number">2</span>, <span class="string">&quot;zxc&quot;</span> + i);</span><br><span class="line">    statement.setObject(<span class="number">3</span>, <span class="string">&quot;二狗&quot;</span> + i);</span><br><span class="line">    <span class="comment">// 不要立即插入，先加入批量中</span></span><br><span class="line">    statement.addBatch();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统一插入</span></span><br><span class="line">statement.executeBatch();</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;使用批量优化插入10000条数据耗时：&quot;</span> + (endTime - startTime));</span><br></pre></td></tr></table></figure><p>实际上批量插入数据优化方式的原理很简单，原先我们创建的运输资源的工具statement需要来回传输资源，但是我们可以事先让发送的数据先缓存起来，然后统一发送，类似于Java文件流中BufferedStream缓冲流的作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】文件处理函数</title>
      <link href="/2023/07/17/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
      <url>/2023/07/17/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="文件的作用"><a href="#文件的作用" class="headerlink" title="文件的作用"></a>文件的作用</h2><p>​文件的意义：大家试想一下，在没有文件之前，我们所编写的C语言程序都是不具有保存功能的，这是因为程序运行时才会加载到内存，但是内存不具有记忆功能，换句话说一经断电关机内存中存储的数据就会全部丢失，这个时候我们想要保存数据，就要使用如硬盘、磁盘等存储设备。</p><p>​在举一个编程的例子，我们已经实现了一个学生成绩管理系统，当我们已经录入学生信息完毕后，我们终止程序运行，但是当下一次重新运行程序的时候，之前录入的数据就会全部丢失！所以我们想要使用保存数据的功能，使用文件就是一种保存数据的解决方案，也就是说文件就是用来实现数据持久化的。</p><h2 id="什么是文件"><a href="#什么是文件" class="headerlink" title="什么是文件"></a>什么是文件</h2><p>在程序设计语言中所谈论的文件主要分为以下两大类：程序文件和数据文件</p><ul><li>程序文件：例如说C语言所编写的源代码文件在经过编译链接之后会生成后缀名为.obj的目标文件和后缀名为.exe的可执行文件</li><li>数据文件：是指程序运行时所需的文件，例如在程序运行中想要从文件中读出相应数据，或者将一些数据写入某个文件中</li></ul><p>文件名：一个文件用以区别于别的文件的唯一标识，也称作文件名</p><p>文件名的组成：通常由三部分构成——文件路径、文件名主干、文件后缀</p><p>例如：c:\code\test.txt</p><p>注意：文件名可以不包括文件后缀，例如单纯一个c:\code\test的文本文件</p><h2 id="文件的打开与关闭"><a href="#文件的打开与关闭" class="headerlink" title="文件的打开与关闭"></a>文件的打开与关闭</h2><p><strong>文件指针</strong></p><p>文件信息区：在C语言中，每个所正在使用的文件都会在内存中开辟相应的文件信息区，用来存放关于文件的信息（如文件名、文件大小、文件状态）这些信息被保存在一个结构体变量当中，该结构体类型由系统进行声明与定义、取名为FILE</p><p>例如在VS2013编译环境中stdio.h的头文件中就有以下FILE类型的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *_ptr;</span><br><span class="line">    <span class="type">int</span>  _cnt;</span><br><span class="line">    <span class="type">char</span> *_base;</span><br><span class="line">    <span class="type">int</span>  _flag;</span><br><span class="line">    <span class="type">int</span>  _file;</span><br><span class="line">    <span class="type">int</span>  _charbuf;</span><br><span class="line">    <span class="type">int</span>  _bufsiz;</span><br><span class="line">    <span class="type">char</span> *_tmpfname;</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> <span class="title">FILE</span>;</span></span><br></pre></td></tr></table></figure><p>在使用文件的过程中，通常会使用一个FILE<em>类型的指针变量来维护这个结构体变量。下面我们可以创建一个FILE</em>类型的指针变量</p><p>FILE* pf; &#x2F;&#x2F; 文件指针变量</p><p>通过pf指针变量，我们就可以让pf指针指向一个文件信息区，通过这个pf指针进一步找到与之相关联的文件</p><p><strong>文件的打开与关闭</strong></p><p>C语言提供了一个打开文件的函数：fopen</p><p>语法格式：FILE* fopen(const char* filename, const char* mode)</p><p>函数作用：通过mode指定的方式，打开一个文件名为filename的文件，并返回一个与之相关联的文件类型指针</p><p>下面是文件常见的一些打开方式（mode）：</p><table><thead><tr><th>文件打开方式</th><th>含义</th><th>如果文件不存在</th></tr></thead><tbody><tr><td>“r”</td><td>为了输入数据，打开一个已经存在的文本文件</td><td>报错</td></tr><tr><td>“w”</td><td>为了输出数据，打开一个文本文件</td><td>创建一个文件</td></tr><tr><td>“a”</td><td>向文本文件末尾追加文本数据</td><td>创建一个文件</td></tr><tr><td>“rb”</td><td>为了输入数据，打开一个已经存在的二进制文件</td><td>报错</td></tr><tr><td>“wb”</td><td>为了输出数据，打开一个二进制文件</td><td>创建一个文件</td></tr><tr><td>“ab”</td><td>向一个二进制文件末尾追加数据</td><td>创建一个文件</td></tr><tr><td>“r+”</td><td>为了读写数据，打开一个已经存在的文本文件</td><td>报错</td></tr><tr><td>“w+”</td><td>为了读写数据，打开一个文本文件</td><td>创建一个文件</td></tr><tr><td>“a+”</td><td>打开一个文本文件，在文件尾读写数据</td><td>创建一个文件</td></tr><tr><td>“rb+”</td><td>为了读写数据，打开一个已经存在的二进制文件</td><td>报错</td></tr><tr><td>“wb+”</td><td>为了读写数据，打开一个二进制文件</td><td>创建一个文件</td></tr><tr><td>“ab+”</td><td>打开一个二进制文件，在末尾读写数据</td><td>创建一个文件</td></tr></tbody></table><p>C语言还提供了一个关闭文件的函数：fclose</p><p>语法格式：int fclose(FILE* stream)</p><p>函数作用：关闭文件流对象stream</p><p>文件打开与关闭演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件操作</span></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fclose(pf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件的顺序读写"><a href="#文件的顺序读写" class="headerlink" title="文件的顺序读写"></a>文件的顺序读写</h2><p><strong>getc与fputc函数</strong></p><p>C语言提供了一个字符输出函数：fputc</p><p>语法格式：int fputc(int character, FILE* stream)</p><p>函数作用：将字符character写入文件流对象stream中，如果成功，返回写入字符，如果写入失败，返回EOF</p><p>C语言也提供了对应的字符读入函数：fgetc</p><p>语法格式：int fgetc(FILE* stream)</p><p>函数作用：返回文件流对象中当前所指向的字符，如果成功读取返回相应字符，读取失败或读取完毕返回EOF</p><p>函数使用演示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用文件</span></span><br><span class="line">fputc(<span class="string">&#x27;a&#x27;</span>, pf);</span><br><span class="line">fputc(<span class="string">&#x27;b&#x27;</span>, pf);</span><br><span class="line">fputc(<span class="string">&#x27;c&#x27;</span>, pf);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"></span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用文件</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(pf)) != EOF) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fgets与fputs函数</strong></p><p>C语言不仅有针对单个字符进行读写的函数，还提供了一个文本行输出函数：fputs</p><p>语法格式：int fputs(const char* str, FILE* stream)</p><p>函数作用：将str所指向的字符串写入文件流对象stream中，如果成功返回非负值，若失败返回EOF</p><p>同样C语言也提供了与之配套的文本行读取函数，可读取多个字符：fgets</p><p>语法格式：char* fgets(char* str, int num, FILE* stream)</p><p>函数作用：读取文件流对象当中的多个字符，但是最多读取num-1个字符，如果期间读取到文件结束标志符或者一行文本读取完毕则结束读取，将读取结果写入str指向的内存空间中，并追加\0，如果正常读取则返回str，如果读取过程中发生了错误或者没有一个字符可以读取则返回空指针NULL</p><p>函数使用演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fputs使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fputs.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">fputs</span>(<span class="string">&quot;hello world!&quot;</span>, pf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fputs.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> str[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span>* ret = fgets(str, <span class="number">19</span>, pf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ret);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fscanf与fprintf函数</strong></p><p>C语言提供了一个格式化输出函数：fprintf</p><p>语法格式：int fprintf(FILE* stream, const char* format, …)</p><p>函数作用：将format指向的格式化数据写入文件流对象stream中，如果写入成功返回写入字符，反之返回负数</p><p>C语言也提供了与之相配套的格式化读取函数：fscanf</p><p>语法格式：int fscanf(FILE* stream, const char* stream, …)</p><p>函数作用：将文件流对象stream中读取格式化数据存储到format指向对象中</p><p>函数使用演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="comment">// fprintf使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fprintf.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">S s = &#123;<span class="string">&quot;rice&quot;</span>, <span class="number">20</span>&#125;;</span><br><span class="line"><span class="comment">// 使用文件</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">fprintf</span>(pf, <span class="string">&quot;%s %d&quot;</span>, s.name, s.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fprintf.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">S s = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">fscanf</span>(pf, <span class="string">&quot;%s %d&quot;</span>, s.name, &amp;s.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, s.name, s.age);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fread与fwrite函数</strong></p><p>C语言提供了一个二进制输出函数：fwrite</p><p>语法格式：size_t fwrite(const void* ptr, size_t size, size_t count, FILE* stream)</p><p>函数作用：会将ptr指向空间内容count * size个字节转化为二进制写入文件流对象stream中</p><p>同样的C语言也提供了与之相配套的二进制读取函数：fread</p><p>语法格式：size_t fread(void* ptr, size_t size, size_t count, FILE* stream)</p><p>函数作用：会将文件流对象中读取count* size个字节对应的二进制信息读取存入ptr指向的空间中</p><p>函数使用演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="comment">// fwrite使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fwrite.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">S s = &#123; <span class="string">&quot;rice&quot;</span>, <span class="number">20</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = fwrite(&amp;s, <span class="keyword">sizeof</span>(S), <span class="number">1</span>, pf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">FILE* pf = fopen(<span class="string">&quot;fwrite.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">S s = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = fread(&amp;s, <span class="keyword">sizeof</span>(S), <span class="number">1</span>, pf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, s.name, s.age);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h2><p><strong>fseek与ftell函数</strong></p><p>C语言提供了一个文件指针移动函数：fseek</p><p>语法格式：int fseek(FILE* stream, long int offset, int whence)</p><p>函数作用：将文件流对象stream的当前位置移动offset个字节，whence参数指定移动的起始位置，0代表文件头，1代表当前位置，2代表文件尾</p><p>函数使用演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfWrite = fopen(<span class="string">&quot;fseek.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfWrite == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen pfWrite&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;hello world!&quot;</span>, pfWrite);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfWrite);</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfRead = fopen(<span class="string">&quot;fseek.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfRead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;fopen pfRead&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件指针起始位置偏移一位</span></span><br><span class="line">fseek(pfRead, <span class="number">1</span>, SEEK_SET);</span><br><span class="line"><span class="type">char</span> ch1 = fgetc(pfRead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch1);</span><br><span class="line"><span class="comment">// 文件指针当前位置偏移一位</span></span><br><span class="line">fseek(pfRead, <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">ch1 = fgetc(pfRead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch1);</span><br><span class="line"><span class="comment">// 文件指针距离末尾偏移-1位</span></span><br><span class="line">fseek(pfRead, <span class="number">-1</span>, SEEK_END);</span><br><span class="line">ch1 = fgetc(pfRead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch1);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfRead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C语言也提供了获取文件指针位置的函数：ftell</p><p>语法格式：long int ftell(FILE* stream)</p><p>函数作用：返回文件流对象stream的当前位置</p><p>函数使用演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ftell使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfWrite = fopen(<span class="string">&quot;ftell.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfWrite == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfWrite fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;hello world!&quot;</span>, pfWrite);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfWrite);</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfRead = fopen(<span class="string">&quot;ftell.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfRead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfRead fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch = fgetc(pfRead);</span><br><span class="line">ch = fgetc(pfRead);</span><br><span class="line">ch = fgetc(pfRead);</span><br><span class="line">ch = fgetc(pfRead);</span><br><span class="line"><span class="comment">// 计算当前偏移量</span></span><br><span class="line"><span class="type">int</span> offset = ftell(pfRead);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前偏移量为: %d\n&quot;</span>, offset);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfRead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件读取结束的判定"><a href="#文件读取结束的判定" class="headerlink" title="文件读取结束的判定"></a>文件读取结束的判定</h2><p>C语言提供了feof函数来判断文件读取是否结束</p><p>注意：文件读取过程中，不要依靠feof函数的返回值来判断文件是否读取结束</p><p>feof函数的作用是：当文件读取结束的时候判断结束的原因是否是因为遇到文件尾</p><p>文本文件判断是否读取结束，需要通过fgetc或者fgets函数的返回值进行判断</p><ol><li>fgetc函数如果返回值为EOF，说明文件读取结束</li><li>fgets函数如果返回值为NULL，说明文件读取结束</li></ol><p>二进制文件判断是否读取结束，需要通过返回值的个数是否小于实际应该读取的个数.如果fread函数返回值小于实际需要读取的个数则说明文件读取结束</p><p>文件读取结束判定演示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本文件判断文件是否读取结束</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfWrite = fopen(<span class="string">&quot;TextEndOfFile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfWrite == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfWrite fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;hello world!&quot;</span>, pfWrite);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfWrite);</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfRead = fopen(<span class="string">&quot;TextEndOfFile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfRead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfRead fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(pfRead)) != EOF) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当文件读取结束后，使用feof函数判断是否是读取到末尾</span></span><br><span class="line"><span class="keyword">if</span> (feof(pfRead)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件正常读取到末尾!\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件异常读取结束!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfRead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对二进制文件读取结束进行判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制文件判断是否读取结束</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;S;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfWrite = fopen(<span class="string">&quot;BinEndOfFile.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfWrite == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfWrite fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">S s1 = &#123; <span class="string">&quot;rice&quot;</span>,  <span class="number">20</span>&#125;;</span><br><span class="line">S s2 = &#123; <span class="string">&quot;json&quot;</span>, <span class="number">21</span> &#125;;</span><br><span class="line">S stus[<span class="number">2</span>] = &#123; s1, s2 &#125;; <span class="comment">// 创建一个结构体数组</span></span><br><span class="line">fwrite(stus, <span class="keyword">sizeof</span>(S), <span class="number">2</span>, pfWrite);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfWrite);</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">FILE* pfRead = fopen(<span class="string">&quot;BinEndOfFile.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pfRead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pfRead fopen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(stus) / <span class="keyword">sizeof</span>(stus[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (fread(stus, <span class="keyword">sizeof</span>(S), <span class="number">2</span>, pfRead) == sz) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件读取完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(pfRead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】动态内存分配</title>
      <link href="/2023/07/16/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2023/07/16/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="动态内存分配的意义"><a href="#动态内存分配的意义" class="headerlink" title="动态内存分配的意义"></a>动态内存分配的意义</h2><p>首先请问下面这段代码有什么缺点吗？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure><p>​<br>上述代码中，我们定义一个占用4字节空间的整型变量a和一个占用10字节连续内存空间的字符数组arr，这种定义方式我们称之为静态分配，区别于动态分配，静态定义变量的方式在程序编译阶段就决定了变量占用空间的大小，但是我们经常在实际开发中遇到下面这种情况。</p><p>​需求：我们现在需要设计一个学生管理系统，但是学生人数暂时未知，并且会随着录入学生人数的增加而不断扩充容量，那么我们使用C语言编写这样一个学生管理系统时，采用结构体数组存储数据，数组的每一个元素都是一个结构体用于存放一个学生的信息，如何解决动态扩容的问题呢？换句话说只有在程序运行的过程中我们才可以确定数组开辟的空间大小。这个时候我们就需要用到C语言的动态内存分配</p><h2 id="动态内存分配函数介绍"><a href="#动态内存分配函数介绍" class="headerlink" title="动态内存分配函数介绍"></a>动态内存分配函数介绍</h2><ol><li><strong>malloc与free函数</strong></li></ol><p>C语言提供了一个用于动态开辟内存空间的函数：malloc</p><p>语法格式：void* malloc(size_t size)</p><p>函数作用：在内存中动态开辟size字节的连续空间，并且返回指向该空间的指针</p><p>函数特点：</p><ul><li>如果函数开辟成功，就返回指向这段内存空间的指针</li><li>如果函数开辟失败，返回NULL指针，因此在使用malloc函数一定要做好返回值检查</li><li>函数返回值类型为void*，函数使用时更加灵活，可以分配给不同类型的指针变量，但是一定要进行强制类型转换后才可以使用</li><li>如果size的值设置为0，该种行为C语言并无明确规定如何处理，由各自实现的编译器决定</li></ul><p>C语言为动态内存分配管理还提供了一个释放内存函数：free</p><p>语法格式：void free(void* ptr)</p><p>函数作用：释放ptr指针指向的内存空间</p><p>函数特点：</p><ul><li>如果free函数的参数不是动态分配的，C语言无明确规定如何处理，由各自编译器决定</li><li>如果free函数的参数是NULL空指针，那么编译器不进行任何处理</li><li>注意：动态分配的空间使用完后一定要手动调用free函数释放，并将ptr指针置为空指针，这是一个良好习惯，否则容易造成内存泄漏等危害！</li></ul><p>下面将对malloc与free函数的基本使用进行举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用完后记得手动释放并置空指针</span></span><br><span class="line">   <span class="built_in">free</span>(arr);</span><br><span class="line">    arr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：在上述代码中，我们通过int* arr &#x3D; (int*)malloc(sizeof(int) * 10)在内存中动态开辟10个整型即40字节的空间，并强制类型转换为int*赋值给一个整型指针变量arr，并且对arr类型进行检查，如果为NULL说明申请空间失败！若申请成功我们进行简单的赋值打印数组各个元素，最后切记使用完要手动调用free函数释放动态分配的内存空间，并且将指针置为空指针。</p><ol start="2"><li><strong>calloc函数</strong></li></ol><p>C语言还提供了另一个动态内存分配函数：calloc</p><p>语法格式：void* calloc(size_t num, size_t size)</p><p>函数作用：在内存中动态开辟num个大小为size字节的连续空间，并返回指向该段内存空间的指针</p><p>函数特点：</p><ul><li>calloc函数与malloc函数不同，calloc函数会初始化该段内存空间的值全为0</li><li>使用calloc函数进行动态分配的空间也需要使用free函数进行手动释放内存空间</li><li>下面将使用calloc函数进行举例说明</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* arr = (<span class="type">int</span>*)<span class="built_in">calloc</span>(<span class="number">10</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="comment">// 返回值检查</span></span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;calloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    arr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：程序执行结果如果所示，变向证明了calloc函数除了开辟内存空间之外还会初始化内容为0，calloc函数使用时也有可能申请空间失败！因此一定要对返回值进行检查，最后使用完后记得调用free函数进行内存空间的释放并将指针置为空指针，保持良好的编码习惯。</p><ol start="3"><li><strong>realloc函数</strong></li></ol><p>除了malloc与calloc函数以外，C语言还提供了另外一个动态内存分配函数：realloc</p><p>语法格式：void* realloc(void* ptr, size_t size)</p><p>函数作用：对ptr指针指向的内存空间进行重新分配调整大小为size，返回指向新内存空间大小为size的指针</p><p>函数特点：</p><ul><li>realloc函数可以灵活调整动态分配的内存大小</li><li>参数中ptr指针为想要调整的内存地址，指向空间一定为动态内存分配的指针（由malloc、calloc、realloc等函数返回）</li><li>参数中size为调整之后的新内存空间大小</li><li>这个函数会自动将原ptr指针指向内存空间的数据完整拷贝到新内存空间中</li><li>realloc函数的返回值可以分为以下两种情况</li></ul><ol><li>当原内存空间仍有剩余位置可以扩容时，返回原空间内存地址</li><li>当原内存空间无法满足新空间大小时，就再开辟另外一块内存空间，并将原内存空间中的数据拷贝到新内存空间中并返回指向新空间的指针</li></ol><p><a href="https://www.imagehub.cc/image/image.bu17xU"><img src="https://s1.imagehub.cc/images/2024/08/31/895a94ca8d58d376d4d7f58b174cd050.png" alt="image"></a></p><p>下面对realloc函数进行举例说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对arr空间进行扩容</span></span><br><span class="line">    <span class="type">int</span>* tmp = (<span class="type">int</span>*)<span class="built_in">realloc</span>(arr, <span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;realloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    arr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中，我们先使用malloc函数为arr分配40个字节的大小，但是后续我们需要对内存空间进行动态扩容，我们就是用realloc函数重新分配80个字节大小的内存空间，realloc函数将原内存空间的数据进行拷贝然后返回新内存空间地址，需要注意我们在使用realloc函数接收返回值时首先用tmp变量进行接收，这是因为如果我们直接用arr进行接收，若重新分配内存大小失败就会导致arr置为NULL，但是原先内存空间丢失无法访问，也会导致内存泄漏等问题，因此我们需要先用临时变量tmp进行接收。最后，realloc函数开辟的内存空间也是需要手动调用free函数进行释放的，并且指针也需要置为NULL。</p><h2 id="常见的动态内存错误"><a href="#常见的动态内存错误" class="headerlink" title="常见的动态内存错误"></a>常见的动态内存错误</h2><ol><li><strong>对空指针进行解引用</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对NULL解引用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(INT_MAX / <span class="number">4</span>);</span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中使用malloc函数申请INT_MAX &#x2F; 4个字节的内存空间，但是极有可能申请失败！但是并未对返回值做检查当p为NULL时*p &#x3D; 20;对空指针进行解引用操作就会导致程序报错！因此要养成良好的习惯，每次动态开辟内存都要对返回值进行检查后再使用。</p><ol start="2"><li><strong>对动态开辟的内存空间越界访问</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 越界访问错误</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        p[i] = i; <span class="comment">// 当i为10越界访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中，我们开辟了10个int类型即40字节的连续内存空间，并将起始地址返回赋值给指针变量p，for循环执行11次当i &#x3D;&#x3D; 10时进行循环但是p[i] &#x3D; i;已经超出40字节内存空间的范围，这也是一种错误的使用方法！</p><ol start="3"><li><strong>对非动态开辟的内存空间使用free</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误使用free</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* p = &amp;a;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中我们定义一个整型a，将它的地址赋值给一个指针变量p，此时我们使用free函数释放内存空间并置空，但是事实上free函数只针对采用动态开辟的内存空间（使用malloc、calloc、realloc申请的内存空间），若对非动态开辟的内存空间是由free，这种使用方式是错误的！</p><ol start="4"><li><strong>使用free释放动态开辟内存的一部分</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用free释放一部分</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        *p = i;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p); <span class="comment">// 此时p已经不指向原先位置</span></span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中，我们开辟了10个int类型即40字节的连续内存空间，并将起始地址返回赋值给指针变量p，在for循环中我们使用语句p++，这会导致指针变量p不指向原先内存空间位置，此时再使用free函数释放局部内存空间就会报错。</p><ol start="5"><li><strong>使用free函数连续释放同一块内存空间</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连续释放同一块内存空间</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码分析：上述代码中我们已经释放p所指向的内存空间后如果再使用free函数连续释放同一块内存空间就会导致程序报错，这是一种错误行为！</p><ol start="6"><li><strong>忘记释放动态开辟内存（内存泄漏</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内存泄漏</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 忘记free</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    test6();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​代码分析：上述代码中，我们进入main函数首先调用test6函数，在test6函数中我们动态开辟内存空间大小为40字节并返回起始地址赋值给指针变量p，函数调用结束由于p为局部变量开辟在栈上所以p会被销毁，但是动态开辟的空间申请在堆上，所以p所指向的空间不会被释放回收！但是我们已经无法访问到那部分内存空间了，此时主函数执行while(1)死循环，程序一直运行，就会导致内存泄漏！</p><p>下面为内存泄漏示意图：</p><p><a href="https://www.imagehub.cc/image/image.bu1Fa0"><img src="https://s1.imagehub.cc/images/2024/08/31/8e997cc6363502afa5e46b4c22a48fea.png" alt="image"></a></p><h2 id="动态内存分配常见题"><a href="#动态内存分配常见题" class="headerlink" title="动态内存分配常见题"></a>动态内存分配常见题</h2><p>示例1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetMemory</span><span class="params">(<span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(str);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问运行Test函数会有什么样的结果？</p><p>题目分析：首先调用Test函数，创建变量str初始化为NULL，然后调用GetMemory函数并传递str作为参数，在GetMemory函数中首先创建局部变量p，并值拷贝str的值为NULL，然后在堆上申请100字节内存空间并将起始地址返回给指针变量p，然后GetMemory函数调用结束，局部变量p销毁。注意p和str的值并不一样，str仍指向NULL空指针，调用strcpy函数会对NULL进行解引用，程序报错！</p><p>这段代码存在两个问题：</p><ul><li>GetMemory函数中没有释放申请的资源，会存在内存泄漏隐患！</li><li>Test函数中调用strcpy()函数，内部会对NULL指针进行解引用，程序报错！</li></ul><p>示例2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">GetMemory</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    str = GetMemory();</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问运行Test函数会有什么样的结果？</p><p>题目分析：首先进入Test函数创建局部变量str并初始化为NULL，然后调用GetMemory函数创建局部变量字符数组arr并初始化为[hello world\0]，然后将p的地址返回赋值给str，最后打印str，理论上这段代码最终能够打印出“hello world”，但是实际上在GetMemory函数中”hello world”用于初始化字符数组，本质上”hello world”字符数组开辟在栈上，当GetMemory函数调用结束，空间全部归还操作系统，哪怕最后返回该段空间的地址使用printf函数访问也是随机值！</p><p>面试题3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetMemory</span><span class="params">(<span class="type">char</span> **p, <span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(&amp;str, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目分析：这段代码是与面试题1进行对比的，这段代码在Test函数中调用GetMemory传参时传递的是二级指针，所以在GetMemory函数中动态开辟内存空间num字节返回起始地址赋值给*p，此时str变量也指向动态开辟的内存空间，所以strcpy函数能够正常调用，最后成功打印”hello”，这段代码唯一错误的地方就是没有进行内存释放，会发生内存泄漏的问题！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C语言的动态内存分配方式相较于静态分配更加灵活，能够适应随程序运行时才确定内存大小的需求，动态内存分配的空间均开辟在堆上，而静态定义申请的空间开辟在栈上。故使用动态内存分配的空间一定要手动调用free函数进行回收和释放！以防造成内存泄漏的危害。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】字符串与内存函数</title>
      <link href="/2023/07/11/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/"/>
      <url>/2023/07/11/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在C语言中，库函数提供了能够处理字符串的一些函数，比如求取字符串长度的strlen等等，有了这些字符串函数我们可以更加快速的实现需求，下面我们将学习各种内置字符串函数的特点及其模拟实现。</p><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><p><strong>求取字符串长度函数</strong></p><p>语法格式：size_t strlen (const void* str)</p><p>作用：求取字符串的长度并返回</p><p>特点:</p><ul><li>字符串根据\0作为标志，而strlen函数统计字符串中\0之前的字符个数并返回</li><li>strlen函数参数指向的字符串必须包含\0，否则程序会崩溃</li><li>strlen函数的返回值为size_t类型，即是一个无符号数，这是一个易错点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    if (strlen(&quot;c&quot;) - strlen(&quot;c++&quot;) &gt; 0) &#123;</span><br><span class="line">        printf(&quot;haha\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;hehe\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这段代码实际上会打印haha，因为strlen函数返回的是无符号整数，那么-2在内存中用无符号整型表示实际上对应相当大的数</p><p>模拟实现：</p><ul><li><p>采用计数器方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">size_t my_strlen(const char* str) &#123;</span><br><span class="line">    int count_len = 0;</span><br><span class="line">    while (*str != &#x27;\0&#x27;) &#123;</span><br><span class="line">        count_len++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    return count_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>采用指针方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size_t my_strlen(const char* str) &#123;</span><br><span class="line">    char* ps = str;</span><br><span class="line">    while (*ps != &#x27;\0&#x27;) &#123;</span><br><span class="line">        ++ps;</span><br><span class="line">    &#125;</span><br><span class="line">    return ps - str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>采用递归的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size_t my_strlen(const char* str) &#123;</span><br><span class="line">    if (*str == &#x27;\0&#x27;) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return 1 + my_strlen(str + 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>字符串拷贝函数</strong></p><p>语法格式：char* strcpy(char* destination, const char* source)</p><p>作用：将source指向的字符串中内容拷贝到destionation指向的空间中</p><p>特点：</p><ul><li>源字符串必须以\0结尾，拷贝以\0作为结束标记</li><li>拷贝字符连同\0一起作为拷贝内容</li><li>目标空间必须足够大</li><li>目标空间必须可变，即不可以直接使用常量字符串如char* dst &#x3D; “hello world”;</li><li>函数返回目标空间起始地址</li></ul><p>模拟实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char* my_strcpy(char* dst, const char* src) &#123;</span><br><span class="line">    // 当src指向\0时完成赋值拷贝，并且此时表达式结果为false停止循环</span><br><span class="line">    char* ret = dst;</span><br><span class="line">    while (*dst++ = *src++) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串拼接函数</strong></p><p>语法格式：char* strcat(char* destination, const char* source)</p><p>作用：将source所指向的字符串拼接到destionation所指向空间的末尾</p><p>特点：</p><ul><li>源字符串和目标字符串都必须以\0结尾</li><li>目标空间必须可变</li><li>目标空间必须足够大，可以容纳拼接后的字符串</li><li>返回目标空间起始地址</li></ul><p>模拟实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">char* my_strcat(char* dst, const char* src) &#123;</span><br><span class="line">    char* ret = dst;</span><br><span class="line">    while (*dst) &#123;</span><br><span class="line">        ++dst;</span><br><span class="line">    &#125;</span><br><span class="line">    // 此时dst指向\0</span><br><span class="line">    // 开始拷贝</span><br><span class="line">    while (*dst++ = *src++) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：当字符串自己给自己追加时，即若源目标空间与目的空间一致，容易导致错误</p><p><strong>字符串比较函数</strong></p><p>语法格式：int strcmp(const char* str1, const char* str2)</p><p>作用：返回两个字符串比较后的结果</p><p>模拟实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int my_strcmp(const char* str1, const char* str2) &#123;</span><br><span class="line">    while (*str1 &amp;&amp; *str2 &amp;&amp; *str1 == *str2) &#123;</span><br><span class="line">        // 说明当前比较字符相同,则继续比较</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    // 此时循环结束分别判断三种情况</span><br><span class="line">    if (*str1 == &#x27;\0&#x27; &amp;&amp; *str2 == &#x27;\0&#x27;) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 此时说明字符串不相等</span><br><span class="line">        return *str1 - *str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找字符串子串函数</strong></p><p>语法格式：char* strstr(const char* str1, const char* str2)</p><p>作用：该函数在str1指向字符串中查找是否包含str2</p><p>特点：</p><ul><li>如果str1中包含字符串str2，那么返回str1中字符串str2的起始地址，反之返回NULL</li></ul><p>模拟实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">char* my_strstr(const char* str1, const char* str2) &#123;</span><br><span class="line">    // 暴力枚举</span><br><span class="line">    while (*str1) &#123;</span><br><span class="line">        while (*str1 &amp;&amp; *str1 != *str2) &#123;</span><br><span class="line">            ++str1;</span><br><span class="line">        &#125;</span><br><span class="line">        // 此时判断str1是否为\0</span><br><span class="line">        if (*str1 == &#x27;\0&#x27;) &#123;</span><br><span class="line">            // 说明没找到</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 开始比较</span><br><span class="line">            char* pstr1 = str1;</span><br><span class="line">            char* pstr2 = str2;</span><br><span class="line">            while (*pstr1 &amp;&amp; *pstr2 &amp;&amp; *pstr1 == *pstr2) &#123;</span><br><span class="line">                ++pstr1;</span><br><span class="line">                ++pstr2;</span><br><span class="line">            &#125;</span><br><span class="line">            // 此时判断两种情况</span><br><span class="line">            if (*pstr2 == &#x27;\0&#x27;) &#123;</span><br><span class="line">                // 说明找到了</span><br><span class="line">                return str1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 说明该轮次没找到继续查找</span><br><span class="line">                ++str1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串分隔函数</strong></p><p>语法格式：char* strtok(char* str, const char* sep)</p><p>作用：在字符串str中查找是否包含sep字符集合中特定字符，并将其置为\0作为标记，返回标记之前起始地址</p><p>特点：</p><ul><li>sep参数是一个字符串，作为分隔符的集合</li><li>当strtok函数的第一个参数不为NULL，那么函数将找到字符串str中第一个标记，置为\0并记录当前位置，返回开始查找位置到第一个标记位置该段区间的起始地址</li><li>当strtok函数的第一个参数为NULL时，则以先前记录的位置开始查找后面的标记，并置为\0，返回该次区间的起始地址</li><li>当strtok函数无法找到下一个标记位时返回空指针NULL</li></ul><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    char arr[] = &quot;123@163.com&quot;;</span><br><span class="line">    char copy_arr[20] = &quot;&quot;;</span><br><span class="line">    char sep[] = &quot;@.&quot;;</span><br><span class="line">    strcpy(copy_arr, arr);</span><br><span class="line">    char* ret;</span><br><span class="line">    for (ret = strtok(copy_arr, sep); ret != NULL; ret = strtok(NULL, sep)) &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串错误信息函数</strong></p><p>语法格式：char* strerror(int errnum)</p><p>作用：返回错误码对应的错误信息起始地址</p><p>特点：</p><ul><li>当发生字符串错误信息时，比如文件路径错误，C语言会将错误信息对应的错误码保存到全局变量errno中，通过这个变量，我们就可以使用strerror函数获取到对应的错误信息并打印</li></ul><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, strerror(i));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内存拷贝函数</strong></p><p>语法格式：void* memcpy(void* destination, void* source, size_t num)</p><p>作用：从source指向内容空间中拷贝num个字节到destination指向内存空间</p><p>特点：</p><ul><li>该函数与strcpy函数不同，即不关心\0是否存在</li><li>参数num以字节作为单位</li><li>该函数的实现只要求destination与source指向两块不同的内存空间，即不要求实现内存空间一致情况下的拷贝</li></ul><p>模拟实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void* my_memcpy(void* dst, void* src, size_t num) &#123;</span><br><span class="line">    void* ret = dst;</span><br><span class="line">    // 拷贝num个字节</span><br><span class="line">    while (num--) &#123;</span><br><span class="line">        *((char*)dst) = *((char*)src); // 强制类型转换为char*</span><br><span class="line">        dst = (char*)dst + 1;</span><br><span class="line">        src = (char*)src + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内存比较函数</strong></p><p>语法格式：int memcmp(const void* ptr1, const void* ptr2, size_t num)</p><p>作用：比较从ptr1与ptr2开始的num个字节内容大小</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    int arr1[] = &#123;1, 2, 3, 4&#125;;</span><br><span class="line">    int arr2[] = &#123;1, 2, 4, 5&#125;;</span><br><span class="line">    if (memcmp(arr1, arr2, 9) &gt; 0) &#123;</span><br><span class="line">        printf(&quot;在前9个字节内容中, arr1大于arr2\n&quot;);</span><br><span class="line">    &#125; else if (memcmp(arr1, arr2, 9) == 0) &#123;</span><br><span class="line">        printf(&quot;在前9个字节内容中, arr1与arr2相等\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">         printf(&quot;在前9个字节内容中, arr1小于arr2\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C语言提供的库函数还有很多，例如说字符串判断函数（是否为数字字符isdigit()、是否为小写字母islower()）与字符串转换大小写函数（转换为小写tolower()、转换为大写toupper()），这些函数可以大大提高我们的开发效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】实现三子棋游戏</title>
      <link href="/2023/05/10/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/"/>
      <url>/2023/05/10/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序运行效果"><a href="#程序运行效果" class="headerlink" title="程序运行效果"></a>程序运行效果</h2><p><a href="https://www.imagehub.cc/image/sanziqi.ba46mL"><img src="https://s1.imagehub.cc/images/2024/08/29/2b4e86a771fb65a032a26edad00081ce.png" alt="sanziqi"></a></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li><p><strong>打印菜单</strong></p><ul><li>根据程序预期的效果，需要一个菜单界面。菜单必须在用户选择之前打印，因此我们可以使用do-while语句。</li><li>根据用户输入实现不同逻辑功能：<ul><li>用户选择1：开始游戏</li><li>用户选择0：退出游戏</li><li>其他数字：提示用户重新选择</li></ul></li><li>这是一个多分支选择语句，可以使用switch-case语句满足需求。</li></ul></li><li><p><strong>棋盘的设计与实现</strong></p><ul><li><strong>棋盘的存储数据结构</strong><ul><li>棋盘是一个3x3的二维平面，可以使用二维数组数据结构来存储数据，如 <code>int board[3][3]</code>。</li></ul></li><li><strong>棋盘的初始化</strong><ul><li>实现一个初始化棋盘的函数 <code>InitBoard()</code>，用空格字符进行占位。</li></ul></li><li><strong>棋盘的布局实现</strong><ul><li>棋盘打印较为复杂，可以通过循环实现，以增加程序的可扩展性和可维护性。</li></ul></li></ul></li><li><p><strong>玩家下棋功能实现</strong></p><ul><li>创建函数 <code>PlayerMove()</code> 用于玩家落子，接收用户输入的坐标位置 (x, y)。<ul><li>检查非法情况：<ol><li>判断落子位置是否越界：<code>x &gt;= 1 &amp;&amp; x &lt;= 3 &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= 3</code>。</li><li>检查落子位置是否已被占据，即当前坐标位置是否为空值。</li></ol></li></ul></li></ul></li><li><p><strong>电脑下棋功能实现</strong></p><ul><li>创建函数 <code>ComputerMove()</code> 用于电脑落子，通过随机值坐标实现。<ul><li>采用 <code>rand()</code> 函数生成随机值。</li><li>处理非法情况：<ol><li>强制数组行列下标值在0-2区间内：取模操作 <code>%3</code>。</li><li>检查落子位置是否已被占据，若是则重新选取随机值坐标。</li></ol></li></ul></li></ul></li><li><p><strong>判断输赢</strong></p><ul><li>创建函数 <code>isWin()</code> 用于判断游戏输赢情况。<ul><li>简单判断用户胜利、电脑胜利、平局的情况。</li><li>设定玩家落子值为 ‘*’，电脑落子值为 ‘#’。</li><li>输赢情况：<ul><li>某一行、列或对角线全是一种字符且不为空格表示胜利。</li><li>若棋盘已满且无胜者，为平局。</li><li>其余情况暂未决出结果，用字符 ‘c’ 表示。</li></ul></li></ul></li></ul></li></ol><h2 id="代码实现细节"><a href="#代码实现细节" class="headerlink" title="代码实现细节"></a>代码实现细节</h2><ol><li><p><strong>棋盘初始化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义初始化棋盘函数</span><br><span class="line">void InitBoard(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 初始化为空格</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">board[i][j] = &#x27; &#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，InitBoard函数的参数为二维数组board, row为行数，col为列数，在函数体中，我们遍历整个二位数组并将值初始化为空格字符</p></li><li><p><strong>棋盘打印函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void DisplayBoard(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">// 打印数据</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">printf(&quot; %c &quot;, board[i][j]);</span><br><span class="line">if (j &lt; col - 1) &#123;</span><br><span class="line">printf(&quot;|&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">// 打印分隔行</span><br><span class="line">if (i &lt; row - 1) &#123;</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">printf(&quot;---&quot;);</span><br><span class="line">if (j &lt; col  -1) &#123;</span><br><span class="line">printf(&quot;|&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了实现可视化的效果，我们使用一些分隔符作为棋盘的边界，并使用大量的循环处理，在这里由于跟业务逻辑的实现无太大关系就省略了实现的细节</p></li><li><p><strong>玩家落子函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 定义玩家落子函数</span><br><span class="line">void PlayerMove(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">printf(&quot;下面轮到玩家下棋\n&quot;);</span><br><span class="line">int x = 0;</span><br><span class="line">int y = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">printf(&quot;请玩家选择落子的坐标，用空格分隔&gt;:&quot;);</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;x, &amp;y);</span><br><span class="line">// 判断玩家落子是否非法</span><br><span class="line">if (x &gt;= 1 &amp;&amp; x &lt;= row &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= col) &#123;</span><br><span class="line">// 判断此处是否已经有落子</span><br><span class="line">if (board[x - 1][y - 1] == &#x27; &#x27;) &#123;</span><br><span class="line">board[x - 1][y - 1] = &#x27;*&#x27;;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;此处已经有落子，请重新选择!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;落子位置非法，请重新选择!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，我们让用户选择坐标并存入变量x、y中，并判断用户的落子位置是否合法，不合法的情况分如下两种：1、落子坐标超出边界 2、落子坐标处已经落子，并且当用户输入非法坐标值，我们应该提示用户选择错误，应当重新输入，因此可以设计为一个循环，只有当用户落子成功才退出循环。</p></li><li><p><strong>电脑落子函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 定义电脑落子函数</span><br><span class="line">void ComputerMove(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 电脑生成随机数</span><br><span class="line">printf(&quot;现在轮到电脑下棋\n&quot;);</span><br><span class="line">int x = 0;</span><br><span class="line">int y = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">x = rand() % row;</span><br><span class="line">y = rand() % col;</span><br><span class="line">// 判断电脑落子处是否有子</span><br><span class="line">if (board[x][y] == &#x27; &#x27;) &#123;</span><br><span class="line">board[x][y] = &#x27;#&#x27;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电脑落子实际上在此处不涉及过多的算法，只是简单的随机落子，可以使用c库函数提供的rand()函数并取模的操作得到我们想要的落子区间0-row-1与0-col-1，但是此处也要判断落子是否合法即该坐标是否已经落子。</p></li><li><p><strong>判断输赢函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 定义判断游戏状态函数</span><br><span class="line">char isWin(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 赢状态</span><br><span class="line">// 1.1 横向相连</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">// 取第一个数</span><br><span class="line">char flagChar = board[i][0];</span><br><span class="line">int flag = 0;</span><br><span class="line">for (int j = 1; j &lt; col; ++j) &#123;</span><br><span class="line">if (flagChar == &#x27; &#x27; || board[i][j] != flagChar) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 0) &#123;</span><br><span class="line">// 说明行全部相等即有人赢</span><br><span class="line">return flagChar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.2 纵向相连</span><br><span class="line">for (int i = 0; i &lt; col; ++i) &#123;</span><br><span class="line">char flagChar = board[0][i];</span><br><span class="line">int flag = 0;</span><br><span class="line">for (int j = 1; j &lt; row; ++j) &#123;</span><br><span class="line">if (flagChar == &#x27; &#x27; || board[j][i] != flagChar) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 0) &#123;</span><br><span class="line">// 说明有列一致,则有人赢了</span><br><span class="line">return flagChar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.3 左斜对角线</span><br><span class="line">char left_top = board[0][0];</span><br><span class="line">int flag1 = 0;</span><br><span class="line">for (int i = 1; i &lt; row; ++i) &#123;</span><br><span class="line">if (left_top == &#x27; &#x27; || left_top != board[i][i]) &#123;</span><br><span class="line">flag1 = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag1 == 0) &#123;</span><br><span class="line">// 说明左斜对角线一致</span><br><span class="line">return left_top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.4 右斜对角线</span><br><span class="line">char right_top = board[0][col - 1];</span><br><span class="line">int flag2 = 0;</span><br><span class="line">for (int i = 1; i &lt; col; ++i) &#123;</span><br><span class="line">if (right_top == &#x27; &#x27; || right_top != board[i][col - i - 1]) &#123;</span><br><span class="line">flag2 = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag2 == 0) &#123;</span><br><span class="line">// 说明右斜对角线一致</span><br><span class="line">return right_top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 平局状态</span><br><span class="line">// 此时如果棋盘已经满了又没人赢说明平局</span><br><span class="line">if (isFull(board, row, col)) &#123;</span><br><span class="line">return &#x27;s&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 游戏未结束</span><br><span class="line">return &#x27;c&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在这个函数中，要完成的就是判断游戏当前的状态，只有以下四种情况：1、玩家获胜 2、电脑获胜 3、平局 4、还未判断出输赢，游戏未结束。</p><p>玩家或者电脑获胜情况：</p><p>以判断横向相连情况为例，我们取当前行第一个元素作为比较元素flagChar，置标记位flag为0，并依次将其与当前行的其余元素一一比较，如果flagChar变量为空格或者比较存在不同则置flag为1代表当前行不满足胜利条件，由于每一行都需要如此进行比较，所以需要for循环遍历每一行，同理也要遍历每一列，而如果flag标记值仍然为0，则说明当前行或者列元素相同并且不为空格，那么则可以说明玩家或者电脑获胜，就返回当前行或者当前列存储的字符即flagChar以便后续判断胜利者。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><ol><li><strong>sanziqi.c</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;game.h&quot;</span><br><span class="line"></span><br><span class="line">// 菜单函数</span><br><span class="line">void menu() &#123;</span><br><span class="line">printf(&quot;******************************\n&quot;);</span><br><span class="line">printf(&quot;*******1. play  0. exit*******\n&quot;);</span><br><span class="line">printf(&quot;******************************\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 游戏函数</span><br><span class="line">void game() &#123;</span><br><span class="line">// 创建棋盘（使用二维数组）</span><br><span class="line">int board[ROW][COL];</span><br><span class="line">// 调用初始化棋盘函数</span><br><span class="line">InitBoard(board, ROW, COL);</span><br><span class="line">// 打印棋盘函数</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">// state代表游戏状态，为*则表示玩家赢，#表示电脑赢了，s代表平局，c代表继续</span><br><span class="line">char state = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">// 玩家落子</span><br><span class="line">PlayerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">// 判断游戏状态</span><br><span class="line">state = isWin(board, ROW, COL);</span><br><span class="line">if (state != &#x27;c&#x27;) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">// 电脑落子</span><br><span class="line">ComputerMove(board, ROW, COL);</span><br><span class="line">DisplayBoard(board, ROW, COL);</span><br><span class="line">// 判断游戏状态</span><br><span class="line">state = isWin(board, ROW, COL);</span><br><span class="line">if (state != &#x27;c&#x27;) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 对state进行判断</span><br><span class="line">if (state == &#x27;*&#x27;) &#123;</span><br><span class="line">printf(&quot;玩家获胜!\n&quot;);</span><br><span class="line">&#125; else if (state == &#x27;#&#x27;) &#123;</span><br><span class="line">printf(&quot;电脑获胜!\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;双方平局!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int choice = 0;</span><br><span class="line">srand((unsigned int)time(NULL));</span><br><span class="line">do &#123;</span><br><span class="line">menu();</span><br><span class="line">printf(&quot;请输入选项&gt;:&quot;);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;choice);</span><br><span class="line">switch (choice) &#123;</span><br><span class="line">case 1:</span><br><span class="line">printf(&quot;三子棋游戏现在开始\n&quot;);</span><br><span class="line">game();</span><br><span class="line">break;</span><br><span class="line">case 0:</span><br><span class="line">printf(&quot;游戏退出!\n&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">printf(&quot;选择非法，请重新输入!\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (choice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>game.h</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#pragma once</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#define ROW 3</span><br><span class="line">#define COL 3</span><br><span class="line"></span><br><span class="line">// 声明初始化棋盘函数</span><br><span class="line">void InitBoard(int board[ROW][COL], int row, int col);</span><br><span class="line"></span><br><span class="line">// 声明打印棋盘函数</span><br><span class="line">void DisplayBoard(int board[ROW][COL], int row, int col);</span><br><span class="line"></span><br><span class="line">// 声明玩家落子函数</span><br><span class="line">void PlayerMove(int board[ROW][COL], int row, int col);</span><br><span class="line"></span><br><span class="line">// 声明电脑落子函数</span><br><span class="line">void ComputerMove(int board[ROW][COL], int row, int col);</span><br><span class="line"></span><br><span class="line">// 声明判断游戏状态函数</span><br><span class="line">char isWin(int board[ROW][COL], int row, int col);</span><br></pre></td></tr></table></figure></li><li><strong>game.c</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;game.h&quot;</span><br><span class="line"></span><br><span class="line">// 定义初始化棋盘函数</span><br><span class="line">void InitBoard(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 初始化为空格</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">board[i][j] = &#x27; &#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义打印棋盘函数</span><br><span class="line">void DisplayBoard(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">// 打印数据</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">printf(&quot; %c &quot;, board[i][j]);</span><br><span class="line">if (j &lt; col - 1) &#123;</span><br><span class="line">printf(&quot;|&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">// 打印分隔行</span><br><span class="line">if (i &lt; row - 1) &#123;</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">printf(&quot;---&quot;);</span><br><span class="line">if (j &lt; col  -1) &#123;</span><br><span class="line">printf(&quot;|&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义玩家落子函数</span><br><span class="line">void PlayerMove(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">printf(&quot;下面轮到玩家下棋\n&quot;);</span><br><span class="line">int x = 0;</span><br><span class="line">int y = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">printf(&quot;请玩家选择落子的坐标，用空格分隔&gt;:&quot;);</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;x, &amp;y);</span><br><span class="line">// 判断玩家落子是否非法</span><br><span class="line">if (x &gt;= 1 &amp;&amp; x &lt;= row &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= col) &#123;</span><br><span class="line">// 判断此处是否已经有落子</span><br><span class="line">if (board[x - 1][y - 1] == &#x27; &#x27;) &#123;</span><br><span class="line">board[x - 1][y - 1] = &#x27;*&#x27;;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;此处已经有落子，请重新选择!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;落子位置非法，请重新选择!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义电脑落子函数</span><br><span class="line">void ComputerMove(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 电脑生成随机数</span><br><span class="line">printf(&quot;现在轮到电脑下棋\n&quot;);</span><br><span class="line">int x = 0;</span><br><span class="line">int y = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">x = rand() % row;</span><br><span class="line">y = rand() % col;</span><br><span class="line">// 判断电脑落子处是否有子</span><br><span class="line">if (board[x][y] == &#x27; &#x27;) &#123;</span><br><span class="line">board[x][y] = &#x27;#&#x27;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 判断棋盘是否满函数</span><br><span class="line">int isFull(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; col; ++j) &#123;</span><br><span class="line">// 如果有空说明没满</span><br><span class="line">if (board[i][j] == &#x27; &#x27;) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 此时说明已经遍历完毕全部不为空</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义判断游戏状态函数</span><br><span class="line">char isWin(int board[ROW][COL], int row, int col) &#123;</span><br><span class="line">// 赢状态</span><br><span class="line">// 1.1 横向相连</span><br><span class="line">for (int i = 0; i &lt; row; ++i) &#123;</span><br><span class="line">// 取第一个数</span><br><span class="line">char flagChar = board[i][0];</span><br><span class="line">int flag = 0;</span><br><span class="line">for (int j = 1; j &lt; col; ++j) &#123;</span><br><span class="line">if (flagChar == &#x27; &#x27; || board[i][j] != flagChar) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 0) &#123;</span><br><span class="line">// 说明行全部相等即有人赢</span><br><span class="line">return flagChar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.2 纵向相连</span><br><span class="line">for (int i = 0; i &lt; col; ++i) &#123;</span><br><span class="line">char flagChar = board[0][i];</span><br><span class="line">int flag = 0;</span><br><span class="line">for (int j = 1; j &lt; row; ++j) &#123;</span><br><span class="line">if (flagChar == &#x27; &#x27; || board[j][i] != flagChar) &#123;</span><br><span class="line">flag = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 0) &#123;</span><br><span class="line">// 说明有列一致,则有人赢了</span><br><span class="line">return flagChar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.3 左斜对角线</span><br><span class="line">char left_top = board[0][0];</span><br><span class="line">int flag1 = 0;</span><br><span class="line">for (int i = 1; i &lt; row; ++i) &#123;</span><br><span class="line">if (left_top == &#x27; &#x27; || left_top != board[i][i]) &#123;</span><br><span class="line">flag1 = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag1 == 0) &#123;</span><br><span class="line">// 说明左斜对角线一致</span><br><span class="line">return left_top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1.4 右斜对角线</span><br><span class="line">char right_top = board[0][col - 1];</span><br><span class="line">int flag2 = 0;</span><br><span class="line">for (int i = 1; i &lt; col; ++i) &#123;</span><br><span class="line">if (right_top == &#x27; &#x27; || right_top != board[i][col - i - 1]) &#123;</span><br><span class="line">flag2 = 1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (flag2 == 0) &#123;</span><br><span class="line">// 说明右斜对角线一致</span><br><span class="line">return right_top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 平局状态</span><br><span class="line">// 此时如果棋盘已经满了又没人赢说明平局</span><br><span class="line">if (isFull(board, row, col)) &#123;</span><br><span class="line">return &#x27;s&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 游戏未结束</span><br><span class="line">return &#x27;c&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轮播图</title>
      <link href="/2023/02/13/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2023/02/13/%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构以及css样式"><a href="#html结构以及css样式" class="headerlink" title="html结构以及css样式"></a>html结构以及css样式</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>外面创建容器，针对四个图片，我们分别设置背景图片。底下有两个按钮，用了fas图标箭头。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://up.enterdesk.com/edpic_source/f7/19/17/f71917381a58651755b0a160fc171872.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://up.enterdesk.com/edpic_source/f7/19/17/f71917381a58651755b0a160fc171872.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://lmg.jj20.com/up/allimg/4k/s/02/2109242302423522-0-lp.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://lmg.jj20.com/up/allimg/4k/s/02/21092500230L092-0-lp.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;arrow left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;arrow right&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><p>设置body样式，采用flex布局，设置align-items: center;justify-content: center;<br>内部容器处于中间位置。<br>同时设置预设的背景类bg，slide类的透明度为0，加上active后为1</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">body</span>&#123;</span><br><span class="line">       <span class="attribute">display</span>: flex;</span><br><span class="line">       <span class="attribute">flex-direction</span>: column;</span><br><span class="line">       <span class="attribute">align-items</span>: center;</span><br><span class="line">       <span class="attribute">justify-content</span>: center;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">background-position</span>: center center;</span><br><span class="line">       <span class="attribute">background-size</span>: cover;</span><br><span class="line">       <span class="attribute">transition</span>: <span class="number">0.4s</span> ease;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">body</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">       <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="attribute">position</span>: absolute;</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>);</span><br><span class="line">       <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.slider-container</span>&#123;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">70vh</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">70vw</span>;</span><br><span class="line">       <span class="attribute">position</span>: relative;</span><br><span class="line">       <span class="attribute">overflow</span>: hidden;</span><br><span class="line">       <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>),<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.slide</span>&#123;</span><br><span class="line">       <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">       <span class="attribute">background-position</span>: center center;</span><br><span class="line">       <span class="attribute">background-size</span>: cover;</span><br><span class="line">       <span class="attribute">position</span>: absolute;</span><br><span class="line">       <span class="attribute">top</span>: -<span class="number">15vh</span>;</span><br><span class="line">       <span class="attribute">left</span>: -<span class="number">15vw</span>;</span><br><span class="line">       <span class="attribute">transition</span>: <span class="number">0.4ms</span> ease;</span><br><span class="line">       <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.slide</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">       <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.arrow</span>&#123;</span><br><span class="line">       <span class="attribute">position</span>: fixed;</span><br><span class="line">       <span class="attribute">background-color</span>: transparent;</span><br><span class="line">       <span class="attribute">color</span>: white;</span><br><span class="line">       <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">       <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">       <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">       <span class="attribute">cursor</span>: pointer;</span><br><span class="line">       <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.right</span>&#123;</span><br><span class="line">       <span class="attribute">right</span>: <span class="number">15vw</span>;</span><br><span class="line">       <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">25px</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.left</span>&#123;</span><br><span class="line">       <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">25px</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="js写法"><a href="#js写法" class="headerlink" title="js写法"></a>js写法</h2><h3 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h3><p>设置slides得到所有slide的数组，activeslide表示当前播放的图片。</p><h3 id="函数注意事项"><a href="#函数注意事项" class="headerlink" title="函数注意事项"></a>函数注意事项</h3><p>setActiveSlide()函数中首先将slides数组中所有标签的active类移除，<br>然后根据activeslide为对应数组元素加上active类标签。<br>setBgtobody()设置背景的图片，两个按钮改变activeslide的数值</p><h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body=<span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line">       <span class="keyword">const</span> slides=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.slide&#x27;</span>)</span><br><span class="line">       <span class="keyword">const</span> leftBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">       <span class="keyword">const</span> rightBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> activeSlide=<span class="number">1</span></span><br><span class="line">       rightBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           activeSlide++</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(activeSlide)</span><br><span class="line">           <span class="keyword">if</span>(activeSlide&gt;slides.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">           activeSlide--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">setActiveSlide</span>()</span><br><span class="line">           <span class="title function_">setBgtobody</span>()</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       leftBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           activeSlide--</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(activeSlide)</span><br><span class="line">           <span class="keyword">if</span>(activeSlide&lt;<span class="number">1</span>)&#123;</span><br><span class="line">           activeSlide++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">setActiveSlide</span>()</span><br><span class="line">           <span class="title function_">setBgtobody</span>()</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       <span class="title function_">setActiveSlide</span>()</span><br><span class="line">       <span class="title function_">setBgtobody</span>()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">setBgtobody</span>(<span class="params"></span>)&#123;</span><br><span class="line">           body.<span class="property">style</span>.<span class="property">backgroundImage</span>=slides[activeSlide].<span class="property">style</span>.<span class="property">backgroundImage</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">setActiveSlide</span>(<span class="params"></span>)&#123;</span><br><span class="line">           slides.<span class="title function_">forEach</span>(<span class="function">(<span class="params">slide</span>)=&gt;</span>&#123;</span><br><span class="line">               slide.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)        </span><br><span class="line">           &#125;)</span><br><span class="line">           slides[activeSlide].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="number">0.4s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">1</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slider-container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>),<span class="number">0</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0.16</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slide</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">15vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">15vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="number">0.4ms</span> ease;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slide</span><span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">15vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">25px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">25px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://up.enterdesk.com/edpic_source/f7/19/17/f71917381a58651755b0a160fc171872.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://up.enterdesk.com/edpic_source/f7/19/17/f71917381a58651755b0a160fc171872.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://lmg.jj20.com/up/allimg/4k/s/02/2109242302423522-0-lp.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#x27;https://lmg.jj20.com/up/allimg/4k/s/02/21092500230L092-0-lp.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;arrow left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;arrow right&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> body=<span class="variable language_">document</span>.<span class="property">body</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> slides=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.slide&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> leftBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;left&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> rightBtn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;right&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> activeSlide=<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        rightBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            activeSlide++</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(activeSlide)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(activeSlide&gt;slides.<span class="property">length</span>-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            activeSlide--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setActiveSlide</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setBgtobody</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        leftBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            activeSlide--</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(activeSlide)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(activeSlide&lt;<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            activeSlide++;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setActiveSlide</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setBgtobody</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setActiveSlide</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setBgtobody</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">setBgtobody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            body.<span class="property">style</span>.<span class="property">backgroundImage</span>=slides[activeSlide].<span class="property">style</span>.<span class="property">backgroundImage</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">setActiveSlide</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            slides.<span class="title function_">forEach</span>(<span class="function">(<span class="params">slide</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                slide.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)        </span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            slides[activeSlide].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】自定义类型—结构体</title>
      <link href="/2022/10/30/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/10/30/%E3%80%90C%E8%AF%AD%E8%A8%80%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E2%80%94%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="结构体的基本概念"><a href="#结构体的基本概念" class="headerlink" title="结构体的基本概念"></a>结构体的基本概念</h2><p>​<br>结构体：是一组值的集合，与数组不同的是，结构体可以包含不同的数据类型（包括基本数据类型、数组、指针类型甚至结构体类型），我们通常把定义在结构体当中的数据称为成员变量，可以说结构体是C语言数据类型中的集大成者。</p><h2 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a>结构体的声明</h2><p>声明格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct tagName &#123;</span><br><span class="line">  member-list;  </span><br><span class="line">&#125;variable-list;</span><br></pre></td></tr></table></figure><p>上述格式中，我们使用关键字struct声明这是一个结构体类型，tagName作为该结构体的名字，member-list定义成员列表，即一组成员变量，例如int age;char name[20];，variable-list表示使用该结构体类型创建的变量<br>例如我们描述一个人的结构体类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct person &#123;</span><br><span class="line">  int age;</span><br><span class="line">  char name[20];</span><br><span class="line">  char gender;</span><br><span class="line">&#125; p1, p2;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>struct Person一起使用表示该结构体的类型，所以在主函数中创建变量格式为struct Person p</li><li>结构体声明时可以同时创建多个变量，如上述代码中的p1、p2，多个变量之间使用逗号分隔，且该变量为全局变量</li><li>我们可以使用typedef关键字简化后续声明类型的格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Person &#123;</span><br><span class="line">  char name[20];</span><br><span class="line">    int age;</span><br><span class="line">&#125;Person;</span><br></pre></td></tr></table></figure><p>​上述格式中，我们使用关键字struct声明这是一个结构体类型，tagName作为该结构体的名字，member-list定义成员列表，即一组成员变量，例如int age;char name[20];，variable-list表示使用该结构体类型创建的变量</p><p>例如我们描述一个人的结构体类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    Person p1; // 声明一个Person结构体类型变量</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体特殊声明"><a href="#结构体特殊声明" class="headerlink" title="结构体特殊声明"></a>结构体特殊声明</h2><p>结构体可以省略tagName进行声明，该结构体称之为匿名结构体</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  int age;</span><br><span class="line">&#125;s;</span><br></pre></td></tr></table></figure><p>易错点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  int age;  </span><br><span class="line">&#125;s1;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">  int age;  </span><br><span class="line">&#125;*ps;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ps = &amp;s1; // 合法吗？</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，编译器一般会报警告因为这两种匿名结构体并不是相同类型，所以ps &#x3D; &amp;s1会导致类型不兼容的错误。</p><p>结论：</p><ul><li>尽管声明的两个匿名结构体成员变量相同，这两个匿名结构体也属于不同的数据类型</li><li>由于匿名结构体缺少tagName标签名，无法定义完整类型， 因此匿名结构体只有在声明之时可以创建变量，在主函数等其他地方不可以再创建变量</li></ul><h2 id="结构体嵌套自身"><a href="#结构体嵌套自身" class="headerlink" title="结构体嵌套自身"></a>结构体嵌套自身</h2><p>易错点1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct B1 &#123;</span><br><span class="line">    int b;</span><br><span class="line">    struct B1 b; // 可行么？</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct B2 &#123;</span><br><span class="line">  int b;</span><br><span class="line">    struct B2* b; // 可行么？</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析：上述代码中，结构体B1与结构体B2当中成员变量都有自身结构体类型的成员，但是区别在于结构体B1中声明的是结构体B1类型的变量b，而结构体B2中声明的是指向结构体B2类型的指针变量b，事实上结构体B1无法通过编译，因为sizeof(B1)计算结构体大小时无法确定，而指针变量在32位平台上有唯一确定大小为4字节，因此结构体B2的声明方式可以通过编译，事实上C语言实现数据结构链表就是使用了第二种结构体定义方式。</p><p>易错点2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 声明方式1</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line">// 声明方式2</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure><p>上述代码中，方案2可行但是方案1不行，在结构体声明时引用自身不得省略struct关键字</p><h2 id="结构体变量的定义与初始化"><a href="#结构体变量的定义与初始化" class="headerlink" title="结构体变量的定义与初始化"></a>结构体变量的定义与初始化</h2><p>结构体变量的定义方式有两种：</p><ol><li><strong>在声明时就进行定义</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">    int age;</span><br><span class="line">    char name[20];</span><br><span class="line">&#125;stu1, stu2;</span><br></pre></td></tr></table></figure><p>该定义方式中创建的变量为全局变量</p><ol start="2"><li><strong>在创建变量时进行定义</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">  int age;</span><br><span class="line">    char name[20];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    struct Student s1 = &#123;20, &quot;jack&quot;&#125;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体变量的初始化方式也有两种</p><ol><li><strong>初始化方式1</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">  int age;</span><br><span class="line">    char name[20];</span><br><span class="line">&#125;s1 = &#123;19, &quot;rice&quot;&#125;;</span><br></pre></td></tr></table></figure><p>该初始化方式顺序必须与声明顺序一致，不可以打乱顺序！</p><ol start="2"><li><strong>初始化方式2</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Student &#123;</span><br><span class="line">  int age;</span><br><span class="line">    char name[20];</span><br><span class="line">&#125;s1 = &#123;.name = &quot;rice&quot;, .age = 19&#125;;</span><br></pre></td></tr></table></figure><p>该初始化方式可以不按声明顺序初始化，但是必须保证初始化的变量都存在，否则会导致未定义的行为！</p><h2 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h2><p>下将介绍结构体内存对齐的规则</p><ul><li>结构体的第一个成员变量对齐到距离结构体变量地址偏移量为0处</li><li>从结构体的第二个成员变量开始，每个成员变量对齐到某个数字（对齐数）的整数倍</li><li>结构体总大小为最大对齐数（所有成员变量的对齐数的最大值）的整数倍</li><li>当结构体嵌套了结构体，内部结构体对齐到自身最大对齐数的整数倍，外部结构体的整体大小为所有成员变量（包括内部结构体）的最大对齐数的整数倍</li></ul><p>示例一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">    char c1;</span><br><span class="line">    int i;</span><br><span class="line">    char c2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S1)); // 12</span><br></pre></td></tr></table></figure><p>本题中声明结构体S1，根据规则1，第一个成员变量char c1对齐到变量地址偏移量为0处，自身占用内存空间为0号，根据规则2，第二个成员变量int i自身占用4字节、默认对齐数为8，则对齐数为4，则应当对齐到4的整数倍，占用内存空间为4号, 5号, 6号, 7号，第三个成员变量char c2自身占用1字节，默认对齐数为8，则对齐数为1，对齐到1的整数倍为8，内存占用空间为8号，根据规则3，结构体整体大小为所有成员变量最大对齐数的整数倍，最大对齐数为max(1, 4, 1) &#x3D; 4，因此整个结构体占用的内存大小为12字节。</p><p><a href="https://www.imagehub.cc/image/image.ba9EDA"><img src="https://s1.imagehub.cc/images/2024/08/30/2250aee7b3be97bb103d9323dcb6b661.png" alt="image"></a></p><p>示例二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct S2</span><br><span class="line">&#123;</span><br><span class="line">    char c1;</span><br><span class="line">    char c2;</span><br><span class="line">    int i;</span><br><span class="line">&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S2)); // 8</span><br></pre></td></tr></table></figure><p>本题声明了结构体S2，第一个成员变量为char c1，根据规则1，内存对齐到偏移为0地址处，占用内存空间为0号，第二个成员变量为char c2，根据规则2，自身所占大小为1字节，默认对齐数为8字节，因此对齐数为1，对齐到1的整数倍即1处，因此占用内存空间为1号，第三个成员变量为int i，根据规则2，自身所占大小为4字节，默认对齐数为8，因此对齐数为4，对齐到4的整数倍即偏移量为4处，占用内存空间为4号、5号、6号、7号，最后根据规则3，整个结构体的大小为最大对齐数的整数倍，而最大对齐数为max(1, 1, 4) &#x3D; 4，即结构体最终大小为8字节。</p><p><a href="https://www.imagehub.cc/image/image.ba9UEI"><img src="https://s1.imagehub.cc/images/2024/08/30/5b72e6fc00a773cda61d43f58d77d0a0.png" alt="image"></a></p><h2 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h2><p>结构题传递参数的方式有两种</p><ul><li>结构体变量作为参数传递</li><li>结构体指针变量作为参数传递</li></ul><p>示例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int data[1000];</span><br><span class="line">    int num;</span><br><span class="line">&#125;;</span><br><span class="line">struct S s = &#123;&#123;1,2,3,4&#125;, 1000&#125;;</span><br><span class="line"></span><br><span class="line">//结构体传参</span><br><span class="line">void print1(struct S s)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;, s.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//结构体地址传参</span><br><span class="line">void print2(struct S* ps)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;, ps-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    print1(s);  //传结构体</span><br><span class="line">    print2(&amp;s); //传地址</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问：针对上述情景，两种传参方式哪个更好？</p><p>答：数传递</p><p>示例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">struct S</span><br><span class="line">&#123;</span><br><span class="line">    int data[1000];</span><br><span class="line">    int num;</span><br><span class="line">&#125;;</span><br><span class="line">struct S s = &#123;&#123;1,2,3,4&#125;, 1000&#125;;</span><br><span class="line"></span><br><span class="line">//结构体传参</span><br><span class="line">void print1(struct S s)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;, s.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//结构体地址传参</span><br><span class="line">void print2(struct S* ps)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;, ps-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    print1(s);  //传结构体</span><br><span class="line">    print2(&amp;s); //传地址</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问：针对上述情景，两种传参方式哪个更好？</p><p>答：采用结构体指针传参更好，因为函数传参的时候，参数需要压栈，如果一个结构体对象过于庞大，比如此案例中结构体中含有开辟1000个int类型的数组成员变量，系统开销比较大，因此采用结构体指针传参性能更加好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增数计时器</title>
      <link href="/2022/10/05/%E5%A2%9E%E5%8A%A0%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
      <url>/2022/10/05/%E5%A2%9E%E5%8A%A0%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构与css样式"><a href="#html结构与css样式" class="headerlink" title="html结构与css样式"></a>html结构与css样式</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><p>在每个计数器盒子上，设置data-target这个标签属性，标志停止计时数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitter fa-3x&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Twiter Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-youtube fa-3x&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Youtube Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-facebook fa-3x&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Facebook Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><p>  body元素设置flex类型，调整align和justify属性使元素居中，高度设为100vh，占满整个屏幕，<br>  同时用@media语句设置，窗口宽度小于一定值时网页中元素竖直排列。</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">         <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-tag">body</span>&#123;</span><br><span class="line">         <span class="attribute">background-color</span>: <span class="number">#8e44ab</span>;</span><br><span class="line">         <span class="attribute">display</span>: flex;</span><br><span class="line">         <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">         <span class="attribute">align-items</span>: center;</span><br><span class="line">         <span class="attribute">justify-content</span>: center;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">         <span class="attribute">overflow</span>: hidden;</span><br><span class="line">         <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.container</span>&#123;</span><br><span class="line">         <span class="attribute">display</span>: flex;</span><br><span class="line">         <span class="attribute">flex-direction</span>: column;</span><br><span class="line">         <span class="attribute">justify-content</span>: center;</span><br><span class="line">         <span class="attribute">align-items</span>: center;</span><br><span class="line">         <span class="attribute">text-align</span>: center;</span><br><span class="line">         <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">50px</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.counter</span>&#123;</span><br><span class="line">         <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">         <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">@media</span>(max-width:500px) &#123;</span><br><span class="line">         <span class="selector-tag">body</span>&#123;</span><br><span class="line">             <span class="attribute">flex-direction</span>: column;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="updateCounter"><a href="#updateCounter" class="headerlink" title="updateCounter"></a>updateCounter</h3><p>设计函数完成计时器，counter元素起始为0，定义target读取最终计时数，increment为每次相加数<br>c为当前计时器显示数字，如果c小于目标值，则计时器元素为c加上increment，设置计时器重复该函数，直到<br>达到目标数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counters=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.counter&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(counters)</span><br><span class="line">        counters.<span class="title function_">forEach</span>(<span class="function"><span class="params">counter</span>=&gt;</span>&#123;</span><br><span class="line">            counter.<span class="property">innerText</span>=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">updateCounter</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">                <span class="keyword">const</span> target=+counter.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-target&#x27;</span>)</span><br><span class="line">                <span class="keyword">const</span> c=+counter.<span class="property">innerText</span></span><br><span class="line">                <span class="keyword">const</span> increment=target/<span class="number">200</span></span><br><span class="line">                <span class="keyword">if</span>(c&lt;target)&#123;</span><br><span class="line">                    counter.<span class="property">innerText</span>=<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(c+increment)&#125;</span>`</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(updateCounter,<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    counter.<span class="property">innerText</span>=target</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">updateCounter</span>()</span><br><span class="line">        &#125;)    </span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line">            background-color: #8e44ab;</span><br><span class="line">            display: flex;</span><br><span class="line">            color: #fff;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .container&#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 30px 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .counter&#123;</span><br><span class="line">            font-size: 60px;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        @media(max-width:500px) &#123;</span><br><span class="line">            body&#123;</span><br><span class="line">                flex-direction: column;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitter fa-3x&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Twiter Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-youtube fa-3x&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Youtube Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-facebook fa-3x&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;counter&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;12000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Facebook Followers<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> counters=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.counter&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(counters)</span></span><br><span class="line"><span class="language-javascript">        counters.<span class="title function_">forEach</span>(<span class="function"><span class="params">counter</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            counter.<span class="property">innerText</span>=<span class="string">&#x27;0&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> <span class="title function_">updateCounter</span>=(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> target=+counter.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-target&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> c=+counter.<span class="property">innerText</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> increment=target/<span class="number">200</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(c&lt;target)&#123;</span></span><br><span class="line"><span class="language-javascript">                    counter.<span class="property">innerText</span>=<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(c+increment)&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">setTimeout</span>(updateCounter,<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    counter.<span class="property">innerText</span>=target</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateCounter</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)    </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广度优先搜索和深度优先搜索</title>
      <link href="/2022/09/02/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E5%92%8C%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/09/02/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E5%92%8C%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h2 id="基于深度优先搜索解决"><a href="#基于深度优先搜索解决" class="headerlink" title="基于深度优先搜索解决"></a>基于深度优先搜索解决</h2><p>当我们找到值为1的点时，我们可以为岛的计数值加一，<br>同时为了避免重复计数，我们将该点记为0，同时能与该点相连的点的值都需要记为0<br>我们设置递归函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, int r, int c) &#123;</span><br><span class="line">       int nr = grid.size();</span><br><span class="line">       int nc = grid[0].size();</span><br><span class="line"></span><br><span class="line">       grid[r][c] = &#x27;0&#x27;;</span><br><span class="line">       if (r - 1 &gt;= 0 &amp;&amp; grid[r-1][c] == &#x27;1&#x27;) dfs(grid, r - 1, c);</span><br><span class="line">       if (r + 1 &lt; nr &amp;&amp; grid[r+1][c] == &#x27;1&#x27;) dfs(grid, r + 1, c);</span><br><span class="line">       if (c - 1 &gt;= 0 &amp;&amp; grid[r][c-1] == &#x27;1&#x27;) dfs(grid, r, c - 1);</span><br><span class="line">       if (c + 1 &lt; nc &amp;&amp; grid[r][c+1] == &#x27;1&#x27;) dfs(grid, r, c + 1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后再全体海域内寻找，答案为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, int r, int c) &#123;</span><br><span class="line">        int nr = grid.size();</span><br><span class="line">        int nc = grid[0].size();</span><br><span class="line"></span><br><span class="line">        grid[r][c] = &#x27;0&#x27;;</span><br><span class="line">        if (r - 1 &gt;= 0 &amp;&amp; grid[r-1][c] == &#x27;1&#x27;) dfs(grid, r - 1, c);</span><br><span class="line">        if (r + 1 &lt; nr &amp;&amp; grid[r+1][c] == &#x27;1&#x27;) dfs(grid, r + 1, c);</span><br><span class="line">        if (c - 1 &gt;= 0 &amp;&amp; grid[r][c-1] == &#x27;1&#x27;) dfs(grid, r, c - 1);</span><br><span class="line">        if (c + 1 &lt; nc &amp;&amp; grid[r][c+1] == &#x27;1&#x27;) dfs(grid, r, c + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        int nr = grid.size();</span><br><span class="line">        if (!nr) return 0;</span><br><span class="line">        int nc = grid[0].size();</span><br><span class="line"></span><br><span class="line">        int num_islands = 0;</span><br><span class="line">        for (int r = 0; r &lt; nr; ++r) &#123;</span><br><span class="line">            for (int c = 0; c &lt; nc; ++c) &#123;</span><br><span class="line">                if (grid[r][c] == &#x27;1&#x27;) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    dfs(grid, r, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="基于广度优先的搜索"><a href="#基于广度优先的搜索" class="headerlink" title="基于广度优先的搜索"></a>基于广度优先的搜索</h2><p>同样地，我们也可以使用广度优先搜索代替深度优先搜索。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 11 都会被重新标记为 00。直到队列为空，搜索结束。</p><p>最终岛屿的数量就是我们进行广度优先搜索的次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        int nr = grid.size();</span><br><span class="line">        if (!nr) return 0;</span><br><span class="line">        int nc = grid[0].size();</span><br><span class="line"></span><br><span class="line">        int num_islands = 0;</span><br><span class="line">        for (int r = 0; r &lt; nr; ++r) &#123;</span><br><span class="line">            for (int c = 0; c &lt; nc; ++c) &#123;</span><br><span class="line">                if (grid[r][c] == &#x27;1&#x27;) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    grid[r][c] = &#x27;0&#x27;;</span><br><span class="line">                    queue&lt;pair&lt;int, int&gt;&gt; neighbors;</span><br><span class="line">                    neighbors.push(&#123;r, c&#125;);</span><br><span class="line">                    while (!neighbors.empty()) &#123;</span><br><span class="line">                        auto rc = neighbors.front();</span><br><span class="line">                        neighbors.pop();</span><br><span class="line">                        int row = rc.first, col = rc.second;</span><br><span class="line">                        if (row - 1 &gt;= 0 &amp;&amp; grid[row-1][col] == &#x27;1&#x27;) &#123;</span><br><span class="line">                            neighbors.push(&#123;row-1, col&#125;);</span><br><span class="line">                            grid[row-1][col] = &#x27;0&#x27;;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (row + 1 &lt; nr &amp;&amp; grid[row+1][col] == &#x27;1&#x27;) &#123;</span><br><span class="line">                            neighbors.push(&#123;row+1, col&#125;);</span><br><span class="line">                            grid[row+1][col] = &#x27;0&#x27;;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (col - 1 &gt;= 0 &amp;&amp; grid[row][col-1] == &#x27;1&#x27;) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col-1&#125;);</span><br><span class="line">                            grid[row][col-1] = &#x27;0&#x27;;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (col + 1 &lt; nc &amp;&amp; grid[row][col+1] == &#x27;1&#x27;) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col+1&#125;);</span><br><span class="line">                            grid[row][col+1] = &#x27;0&#x27;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转排序二分查找</title>
      <link href="/2022/08/24/%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/08/24/%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>对于有序数组，可以使用二分查找的方法查找元素。<br>但对于旋转后的部分有序序列，如[4,5,6,7,1,2,3]<br>我们可以发现，不管我们取到哪个数，我们都可以以这个数为界将数列分为左右两边，<br>其中必定有一个部分是有序的，针对这点，我们可以筛查有序的部分<br>如果在当前目标数在当前有序部分内，则我们可以[mid,right]或[left,mid]这部分按照正常的二分排序查找。<br>否则在另一个部分中查找，对无序部分再次进行二分。</p><p>图示：<br><img src="https://assets.leetcode-cn.com/solution-static/33/33_fig1.png" alt="image"></p><h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0<br>输出：4</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        int n = (int)nums.size();</span><br><span class="line">        if (!n) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n == 1) &#123;</span><br><span class="line">            return nums[0] == target ? 0 : -1;</span><br><span class="line">        &#125;</span><br><span class="line">        int l = 0, r = n - 1;</span><br><span class="line">        while (l &lt;= r) &#123;</span><br><span class="line">            int mid = (l + r) / 2;</span><br><span class="line">            if (nums[mid] == target) return mid;</span><br><span class="line">            if (nums[0] &lt;= nums[mid]) &#123;</span><br><span class="line">                if (nums[0] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    r = mid - 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    l = mid + 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - 1]) &#123;</span><br><span class="line">                    l = mid + 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    r = mid - 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动页面</title>
      <link href="/2022/07/15/%E6%BB%9A%E5%8A%A8%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/07/15/%E6%BB%9A%E5%8A%A8%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构与css样式"><a href="#html结构与css样式" class="headerlink" title="html结构与css样式"></a>html结构与css样式</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>滚动动画<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><p>  初始设置各个元素方块离开屏幕，为此在body样式中设置x轴隐藏。<br>  为了使相邻盒子移动方向相反，用nth-of-type方法设置偶数盒子初始位置在另一边。<br>  预先设置show类选择器，添加该类让盒子移动回来</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">body</span>&#123;</span><br><span class="line">          </span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">flex-direction</span>: column;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">overflow-x</span>:hidden ;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">background-color</span>: steelblue;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">400%</span>);</span><br><span class="line">        <span class="attribute">transition</span>: transform <span class="number">0.4s</span> ease;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.box</span><span class="selector-pseudo">:nth-of-type</span>(even)&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">400%</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.box</span><span class="selector-class">.show</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>要实现滚动条动画，要为整个窗口（window）添加scorll动作，每次移动滚动条时调用checkBoxes函数，<br>首先要定义该函数</p><h3 id="checkBoxes"><a href="#checkBoxes" class="headerlink" title="checkBoxes"></a>checkBoxes</h3><p>用window.innerHeight语句可以得到整个窗口的高度，以高度的五分之四作为标准，任一盒子到顶部的距离小于该高度时会移动回来，<br>计算盒子到顶部距离用到getBoundingClientRect()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function checkBoxes() &#123;</span><br><span class="line">    const triggerBottom = window.innerHeight / 5 * 4</span><br><span class="line"></span><br><span class="line">    boxes.forEach(box =&gt; &#123;</span><br><span class="line">        const boxTop = box.getBoundingClientRect().top</span><br><span class="line"></span><br><span class="line">        if(boxTop &lt; triggerBottom) &#123;</span><br><span class="line">            box.classList.add(&#x27;show&#x27;)</span><br><span class="line">        &#125; </span><br><span class="line">        else &#123;</span><br><span class="line">            box.classList.remove(&#x27;show&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>注意在进入界面时就要调用一次函数，之后每次滚动滚动条都会触发函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> boxes = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, checkBoxes)</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkBoxes</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkBoxes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> triggerBottom = <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">5</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    boxes.<span class="title function_">forEach</span>(<span class="function"><span class="params">box</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> boxTop = box.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(boxTop &lt; triggerBottom) &#123;</span><br><span class="line">            box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-x</span>:hidden ;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: steelblue;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">400%</span>);</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transition</span>: transform <span class="number">0.4s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:nth-of-type</span>(even)&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">400%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-class">.show</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>滚动动画<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> boxes = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, checkBoxes)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">checkBoxes</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">checkBoxes</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> triggerBottom = <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">5</span> * <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    boxes.<span class="title function_">forEach</span>(<span class="function"><span class="params">box</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> boxTop = box.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(boxTop &lt; triggerBottom) &#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小游戏制作</title>
      <link href="/2022/07/15/%E5%9F%BA%E4%BA%8EJS%E7%9A%84%E8%B0%B7%E6%AD%8C%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
      <url>/2022/07/15/%E5%9F%BA%E4%BA%8EJS%E7%9A%84%E8%B0%B7%E6%AD%8C%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>在无网络的情况下打开Chrome浏览器，网页上出现一个预置的小游戏以供消遣。</p><p>本节将制作一个简单的类谷歌小游戏。</p><h2 id="html和css结构"><a href="#html和css结构" class="headerlink" title="html和css结构"></a>html和css结构</h2><p>html与css文件的代码内容较为简单,html除了需要调用css和js文件的内容，还需要创建一个canvas的画布，<br>在画布上完成画布的制作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css文件主要将画布调到网页的中心位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#canvas</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid black ;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js代码设计"><a href="#js代码设计" class="headerlink" title="js代码设计"></a>js代码设计</h2><p>首先在网页中用dom操作中读取画布，同时定义画布绘画的方法，画布的宽高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas=<span class="variable language_">this</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> ctx=canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    canvas.<span class="property">width</span>=<span class="number">500</span>;</span><br><span class="line">    canvas.<span class="property">height</span>=<span class="number">500</span>;</span><br></pre></td></tr></table></figure><h3 id="主类Game的设计"><a href="#主类Game的设计" class="headerlink" title="主类Game的设计"></a>主类Game的设计</h3><p>game类的代码设计如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">width,height</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">width</span>=width</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">height</span>=height</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">enemies</span>=[<span class="keyword">new</span> <span class="title class_">Enemy</span>(<span class="variable language_">this</span>)]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">enemyInterval</span>=<span class="number">500</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">enemyTimer</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">input</span>=<span class="keyword">new</span> <span class="title class_">Inputhandler</span>(<span class="variable language_">this</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>=<span class="keyword">new</span> <span class="title class_">Player</span>(<span class="variable language_">this</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">score</span>=<span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">gameOver</span>=<span class="literal">false</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ui</span>=<span class="keyword">new</span> <span class="title function_">UI</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">enemyTimer</span>&gt;<span class="variable language_">this</span>.<span class="property">enemyInterval</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">enemies</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Enemy</span>(<span class="variable language_">this</span>))</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">enemyTimer</span>=<span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">score</span>+=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">enemyTimer</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">enemies</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">enemy,index</span>)=&gt;</span>&#123;</span><br><span class="line">                enemy.<span class="title function_">update</span>()</span><br><span class="line">                <span class="keyword">if</span>(enemy.<span class="property">x</span>&lt;-<span class="number">50</span>) <span class="variable language_">this</span>.<span class="property">enemies</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="title function_">update</span>(<span class="variable language_">this</span>.<span class="property">input</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">enemies</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">enemy</span>=&gt;</span>&#123;</span><br><span class="line">                enemy.<span class="title function_">draw</span>(ctx)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="title function_">draw</span>(ctx)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ui</span>.<span class="title function_">draw</span>(ctx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>game主类的构造函数的参数列表包括画布的宽高，各项属性分类如下；</p><ol><li>game的宽高，实际上就是画布的宽高</li><li>敌人类，创建一个敌人列表，该列表首先填入一个敌人，同时还包括敌人出现的间隔时间和计时器的初定义</li><li>玩家类和操作类，创建玩家类，同时创建一个新输入类</li><li>初始化分数和游戏结束条件，创建一个ui</li></ol><h4 id="更新函数"><a href="#更新函数" class="headerlink" title="更新函数"></a>更新函数</h4><p>首先对敌人单位的更新进行判断，当计时器达到间隔值时，敌人列表<br>填充一个新敌人</p><p>之后对敌人列表的所有敌人做操作，利用forEach方法，forEach方法传达<br>两个参数，可以用任意的变量接收，名字任取，这里用enemy和index，enemy<br>是列表中每一个的元素，index是它的编号，假如该敌人已经脱离屏幕，我们将<br>该敌人删除，删除的方法是splice，该方法传递两个参数，列表在对应的位置<br>删除数个元素。</p><p>同时更新玩家的位置，调用玩家的更新函数，传入输入器</p><h4 id="绘制函数"><a href="#绘制函数" class="headerlink" title="绘制函数"></a>绘制函数</h4><p>同样用forEach方法调用每一个敌人的绘制函数，玩家的绘制函数，ui的绘制函数</p><h3 id="敌人类"><a href="#敌人类" class="headerlink" title="敌人类"></a>敌人类</h3><p>敌人类的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lass <span class="title class_">Enemy</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">game</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">game</span>=game</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span>=canvas.<span class="property">width</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span>=canvas.<span class="property">height</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">width</span>=<span class="number">100</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">height</span>=<span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">draw</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            context.<span class="title function_">fillRect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">height</span>,<span class="variable language_">this</span>.<span class="property">width</span>,<span class="variable language_">this</span>.<span class="property">height</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>敌人类的设计同样包括构造函数，更新函数和绘制函数，<br>构造函数中传递了game类，每一个敌人的初始位置<br>设定为画布的宽高，即右下角</p><p>更新函数中敌人的x坐标逐步减少<br>绘制函数中绘制图形，为了简化模型我们直接调用fillRect方法绘制方形，<br>该方法传递四个参数，分别是起始的x和y坐标标记位置，后两个是矩形的宽高<br>如果有对应素材可以用drawImage绘制图片</p><h3 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h3><p>操作类的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Inputhandler</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">game</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">game</span>=game</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">key</span>=[]</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>((e.<span class="property">key</span>===<span class="string">&#x27;ArrowDown&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowUp&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowLeft&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowRight&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;Enter&#x27;</span>)&amp;&amp;<span class="variable language_">this</span>.<span class="property">key</span>.<span class="title function_">indexOf</span>(e.<span class="property">key</span>)===-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">key</span>.<span class="title function_">push</span>(e.<span class="property">key</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(e.<span class="property">key</span>===<span class="string">&#x27;ArrowDown&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowUp&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowLeft&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;ArrowRight&#x27;</span>||e.<span class="property">key</span>===<span class="string">&#x27;Enter&#x27;</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">key</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="property">key</span>.<span class="title function_">indexOf</span>(e.<span class="property">key</span>),<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>操作类包含一个key列表，存储按下的操作键</p><p>定义两个window的操作事件，第一个是按下按键”keydown”,<br>第二个是松开按键“keyup”，我们用e来接收方法返回的参数，<br>这是一个较为复杂的参数，这里取它的key属性，该属性描述了按下或松开按键的<br>按键名，当它为四个方向键时（且列表中未有该键，防止重复输入），列表中添加<br>或删除该元素</p><h3 id="玩家类"><a href="#玩家类" class="headerlink" title="玩家类"></a>玩家类</h3><p>玩家类的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">game</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>=game</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span>=canvas.<span class="property">width</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span>=<span class="number">50</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span>=<span class="number">100</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">weight</span>=<span class="number">0.15</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vy</span>=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">input</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(input.<span class="property">key</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ArrowLeft&#x27;</span>)) <span class="variable language_">this</span>.<span class="property">x</span>--;</span><br><span class="line">        <span class="keyword">if</span>(input.<span class="property">key</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ArrowRight&#x27;</span>)) <span class="variable language_">this</span>.<span class="property">x</span>++;</span><br><span class="line">        <span class="keyword">if</span>(input.<span class="property">key</span>.<span class="title function_">includes</span>(<span class="string">&#x27;ArrowUp&#x27;</span>)&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">onground</span>())  &#123;<span class="variable language_">this</span>.<span class="property">vy</span>+=<span class="number">10</span>;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">y</span>+<span class="string">&quot;onground&quot;</span>+<span class="variable language_">this</span>.<span class="title function_">onground</span>())&#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span>-=<span class="variable language_">this</span>.<span class="property">vy</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">onground</span>()) <span class="variable language_">this</span>.<span class="property">vy</span>-=<span class="variable language_">this</span>.<span class="property">weight</span></span><br><span class="line">        <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="property">vy</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">x</span>&lt;<span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">x</span>=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">x</span>&gt;<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">width</span>-<span class="variable language_">this</span>.<span class="property">width</span>) <span class="variable language_">this</span>.<span class="property">x</span>=<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">width</span>-<span class="variable language_">this</span>.<span class="property">width</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">enemies</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">enemy</span>=&gt;</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(enemy.<span class="property">x</span>&lt;<span class="variable language_">this</span>.<span class="property">x</span>+<span class="variable language_">this</span>.<span class="property">width</span>&amp;&amp;enemy.<span class="property">x</span>+enemy.<span class="property">width</span>&gt;<span class="variable language_">this</span>.<span class="property">x</span>&amp;&amp;enemy.<span class="property">y</span>&lt;<span class="variable language_">this</span>.<span class="property">y</span>+<span class="variable language_">this</span>.<span class="property">height</span>&amp;&amp;enemy.<span class="property">y</span>+enemy.<span class="property">height</span>&gt;<span class="variable language_">this</span>.<span class="property">y</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">gameOver</span>=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            )</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">draw</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        context.<span class="property">fillStyle</span>=<span class="string">&#x27;Red&#x27;</span></span><br><span class="line">        context.<span class="title function_">fillRect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">height</span>,<span class="variable language_">this</span>.<span class="property">width</span>,<span class="variable language_">this</span>.<span class="property">height</span>)</span><br><span class="line">        context.<span class="property">fillStyle</span>=<span class="string">&#x27;Black&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onground</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">y</span>&gt;=<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p>玩家类的构造函数中同样定义了玩家的起始位置，宽高，<br>同时这里额外定义了weight和vy，主要用于跳跃的有关操作</p><h4 id="更新函数-1"><a href="#更新函数-1" class="headerlink" title="更新函数"></a>更新函数</h4><p>玩家的更新要用到先前定义的输入类，当其包含左右键时x坐标分别做加减，<br>而当按上键且玩家处于地面上的时候，玩家进行跳跃。</p><p>在跳跃的一瞬间，玩家的y方向速度vy增加，y坐标减去vy，<br>从而实现玩家的向上移动，同时玩家在离地情况下受重力影响，vy<br>不断减去重力，当vy减到负值时，玩家向下移动，到达地面后vy为0。</p><p>我们同时判断玩家与敌人是否接触，player类中也用构造函数导入了游戏类，<br>所以可以直接调用game类的各项方法，当我们判断玩家与一个敌人重叠时，<br>game的gameover值为true，游戏结束</p><h4 id="绘制函数-1"><a href="#绘制函数-1" class="headerlink" title="绘制函数"></a>绘制函数</h4><p>绘制函数同样是绘制了一个简单的矩形，我们将玩家标记为红色，<br>所以我们前后调用了两次fillStyle方法，一次改变，一次改回来</p><h4 id="UI类"><a href="#UI类" class="headerlink" title="UI类"></a>UI类</h4><p>UI代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UI</span>&#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">game</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">game</span>=game</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fontSize</span>=<span class="number">150</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fontFamily</span>=<span class="string">&#x27;Helvetica&#x27;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">liveImage</span>=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;live&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">draw</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            context.<span class="title function_">save</span>()</span><br><span class="line">            context.<span class="property">shadowOffsetX</span>=<span class="number">2</span></span><br><span class="line">            context.<span class="property">shadowOffsetY</span>=<span class="number">2</span></span><br><span class="line">            context.<span class="property">shadowColor</span>=<span class="string">&#x27;white&#x27;</span></span><br><span class="line">            context.<span class="property">shadowBlur</span>=<span class="number">0</span></span><br><span class="line">            context.<span class="property">font</span>=<span class="variable language_">this</span>.<span class="property">fontSize</span>*<span class="number">0.1</span>+<span class="string">&#x27;px &#x27;</span>+<span class="variable language_">this</span>.<span class="property">fontFamily</span></span><br><span class="line">            context.<span class="property">textAlign</span>=<span class="string">&#x27;left&#x27;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fillStyle</span>=<span class="string">&#x27;black&#x27;</span></span><br><span class="line">            context.<span class="title function_">fillText</span>(<span class="string">&#x27;Score: &#x27;</span>+<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">score</span>,<span class="number">20</span>,<span class="number">50</span>)</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">gameOver</span>)&#123;</span><br><span class="line">                context.<span class="property">textAlign</span>=<span class="string">&#x27;left&#x27;</span></span><br><span class="line">                context.<span class="property">font</span>=<span class="variable language_">this</span>.<span class="property">fontSize</span>*<span class="number">0.2</span>+<span class="string">&#x27;px &#x27;</span>+<span class="variable language_">this</span>.<span class="property">fontFamily</span></span><br><span class="line">                context.<span class="title function_">fillText</span>(<span class="string">&#x27;Game Over&#x27;</span>,<span class="number">120</span>,<span class="number">200</span>)</span><br><span class="line">                context.<span class="title function_">fillText</span>(<span class="string">&#x27;You score is  &#x27;</span>+<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">score</span>,<span class="number">100</span>,<span class="number">250</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            context.<span class="title function_">restore</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ui类记录分数，先前我们已经规定每次生成一个新敌人，分数增加，<br>ui类绘制左上角分数，同时如果游戏结束，会生成gameover字样</p><h4 id="游戏启动"><a href="#游戏启动" class="headerlink" title="游戏启动"></a>游戏启动</h4><p>最后的主函数启动游戏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> game=<span class="keyword">new</span> <span class="title class_">Game</span>(canvas.<span class="property">width</span>,canvas.<span class="property">height</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvas.<span class="property">width</span>,canvas.<span class="property">height</span>)</span><br><span class="line">        game.<span class="title function_">update</span>()</span><br><span class="line">        game.<span class="title function_">draw</span>()</span><br><span class="line">        <span class="keyword">if</span>(!game.<span class="property">gameOver</span>) <span class="title function_">requestAnimationFrame</span>(animate)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">animate</span>()</span><br></pre></td></tr></table></figure><p>创建一个新游戏，然后定义帧操作，<br>首先用clearRect对上一帧的画面进行清除，逐次调用主类的更新和绘制函数,<br>只要游戏未结束，就不断请求新的帧。</p>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模糊加载</title>
      <link href="/2022/07/13/%E6%A8%A1%E7%B3%8A%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/07/13/%E6%A8%A1%E7%B3%8A%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构以及css样式"><a href="#html结构以及css样式" class="headerlink" title="html结构以及css样式"></a>html结构以及css样式</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-text&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.bg</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2104&amp;q=80&#x27;</span>)</span><br><span class="line">no-repeat center center/cover;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> + <span class="number">60px</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> + <span class="number">60px</span>);</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">0px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.loading-text</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="js写法"><a href="#js写法" class="headerlink" title="js写法"></a>js写法</h2><h3 id="计时器说明"><a href="#计时器说明" class="headerlink" title="计时器说明"></a>计时器说明</h3><p>JS中可以通过setInterval语句设置计时器，一旦设定，计时器将会每隔固定的时间进行对应的操作。<br>let int &#x3D; setInterval(blurring, 30)该语句，会让页面每隔30ms执行一次blurring函数。</p><h3 id="blurring-函数注意事项"><a href="#blurring-函数注意事项" class="headerlink" title="blurring 函数注意事项"></a>blurring 函数注意事项</h3><p>每一次执行该函数，让预定的load值+1，同时替换页面文字，当load值达到100摘除计时器。<br>期间还需要设置背景的模糊效果和加载数字的透明度。因此定义了表达式scale,该表达式让load值正则化，<br>使输出值处于一个指定的区间内。<br>普通的引号无法内嵌表达式，因此这里用反引号“<code>$&#123;scale()&#125;</code>”,${}括号内是变量与表达式。</p><h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.loading-text&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> load = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> int = <span class="built_in">setInterval</span>(blurring, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">blurring</span>(<span class="params"></span>) &#123;</span><br><span class="line">  load++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (load &gt; <span class="number">99</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(int)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  loadText.<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;load&#125;</span>%`</span></span><br><span class="line">  loadText.<span class="property">style</span>.<span class="property">opacity</span> = <span class="title function_">scale</span>(load, <span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  bg.<span class="property">style</span>.<span class="property">filter</span> = <span class="string">`blur(<span class="subst">$&#123;scale(load, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">0</span>)&#125;</span>px)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">scale</span> = (<span class="params">num, in_min, in_max, out_min, out_max</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://images.unsplash.com/photo-1576161787924-01bb08dad4a4?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2104&amp;q=80&#x27;</span>)</span></span><br><span class="line"><span class="language-css">    no-repeat center center/cover;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> + <span class="number">60px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> + <span class="number">60px</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.loading-text</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-text&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> loadText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.loading-text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> bg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> load = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> int = <span class="built_in">setInterval</span>(blurring, <span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">blurring</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  load++</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (load &gt; <span class="number">99</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(int)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  loadText.<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;load&#125;</span>%`</span></span></span><br><span class="line"><span class="language-javascript">  loadText.<span class="property">style</span>.<span class="property">opacity</span> = <span class="title function_">scale</span>(load, <span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  bg.<span class="property">style</span>.<span class="property">filter</span> = <span class="string">`blur(<span class="subst">$&#123;scale(load, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">0</span>)&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">scale</span> = (<span class="params">num, in_min, in_max, out_min, out_max</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2022/07/13/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/07/13/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>回溯算法就是常说的DFS,本质上是一种暴力枚举算法，按多叉树的原理挑选出不同的组合<br>其主要用于解决下列问题：</p><ol><li>组合</li><li>排列</li><li>切割</li><li>子集</li><li>n皇后</li></ol><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">result = [](vector&lt;vecter&lt;<span class="built_in">type</span>&gt;&gt; result)   //结果集</span><br><span class="line">vector &lt;<span class="built_in">type</span>&gt; //路径</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.push_back(路径)  //把已经做出的选择添加到结果集；</span><br><span class="line">        <span class="built_in">return</span>  //一般的回溯函数返回值都是空；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表: //其实每个题的不同很大程度上体现在选择列表上，要注意这个列表的更新，</span><br><span class="line">    //比如可能是搜索起点和终点，比如可能是已经达到某个条件，比如可能已经选过了不能再选；</span><br><span class="line">        做选择  //把新的选择添加到路径里；路径.push_back(选择) </span><br><span class="line">        backtrack(路径, 选择列表) //递归；</span><br><span class="line">        撤销选择  //回溯的过程；路径.remove(选择) (路径.pop_back())</span><br></pre></td></tr></table></figure><p>在这个过程中，我们其实是在做两种遍历；</p><ol><li>横向遍历(for):其实就是我们在不停的做着的选择；</li><li>纵向遍历(递归):其实就是在做完选择后面临的下一轮选择；</li></ol><p>在纵向遍历得到结果后，加入结果集，同时回溯撤销当前选择，寻找其他组合形式</p><p><img src="https://s1.imagehub.cc/images/2022/07/13/clipboard.png" alt="image"></p><h2 id="leecode-样例"><a href="#leecode-样例" class="headerlink" title="leecode 样例"></a>leecode 样例</h2><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。<br>你可以按 任何顺序 返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">来源于官方解答</span><br><span class="line">vector&lt;int&gt; temp;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">void dfs(int cur, int n, int k) &#123;</span><br><span class="line">    // 剪枝：temp 长度加上区间 [cur, n] 的长度小于 k，不可能构造出长度为 k 的 temp</span><br><span class="line">    <span class="keyword">if</span> (temp.size() + (n - cur + 1) &lt; k) &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    // 记录合法的答案</span><br><span class="line">    <span class="keyword">if</span> (temp.size() == k) &#123;</span><br><span class="line">        ans.push_back(temp);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    // 考虑选择当前位置</span><br><span class="line">    temp.push_back(cur);</span><br><span class="line">    dfs(cur + 1, n, k);</span><br><span class="line">    temp.pop_back();</span><br><span class="line">    // 考虑不选择当前位置</span><br><span class="line">    dfs(cur + 1, n, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;</span><br><span class="line">    dfs(1, n, k);</span><br><span class="line">    <span class="built_in">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列-1"><a href="#全排列-1" class="headerlink" title="全排列"></a>全排列</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">来源官方解答</span><br><span class="line">vector&lt;bool&gt; status;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; ret;</span><br><span class="line">vector&lt;int&gt; track;</span><br><span class="line"></span><br><span class="line">void backTrack(vector&lt;int&gt; &amp;nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (track.size() == n) &#123;</span><br><span class="line">        ret.push_back(track);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!status[i]) &#123;</span><br><span class="line">            status[i] = <span class="literal">true</span>;</span><br><span class="line">            track.push_back(nums[i]);</span><br><span class="line">            backTrack(nums);</span><br><span class="line">            track.pop_back();</span><br><span class="line">            status[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt; &amp;nums) &#123;</span><br><span class="line">    n = nums.size();</span><br><span class="line">    status.resize(n, <span class="literal">false</span>);</span><br><span class="line">    backTrack(nums);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母大小写全排列"><a href="#字母大小写全排列" class="headerlink" title="字母大小写全排列"></a>字母大小写全排列</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个字符串 s ，通过将字符串 s 中的每个字母转变大小写，我们可以获得一个新的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a1b2&quot;</span><br><span class="line">输出：[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</span><br></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">自解</span><br><span class="line">void traverses(string s,vector&lt;string&gt; &amp;ret,int idx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(idx==s.length())</span><br><span class="line">        &#123;</span><br><span class="line">            ret.emplace_back(s);</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[idx]&gt;=65 &amp;&amp; s[idx]&lt;=90)</span><br><span class="line">        &#123;</span><br><span class="line">            s[idx]+=32;</span><br><span class="line">            traverses(s,ret,idx+1);</span><br><span class="line">            s[idx]-=32;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[idx]&gt;=97 &amp;&amp; s[idx]&lt;=122)</span><br><span class="line">        &#123;</span><br><span class="line">            s[idx]-=32;</span><br><span class="line">            traverses(s,ret,idx+1);</span><br><span class="line">            s[idx]+=32;</span><br><span class="line">        &#125;</span><br><span class="line">        traverses(s,ret,idx+1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; letterCasePermutation(string S) &#123;</span><br><span class="line">        vector&lt;string&gt; ret;</span><br><span class="line">        <span class="keyword">if</span>(S.length()&gt;0)</span><br><span class="line">            traverses(S,ret,0);</span><br><span class="line">        <span class="built_in">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>凡是涉及到做选择的，尤其是提到的五个类型：组合、排序、分割、子集、棋盘。<br>这种都可以构建一颗决策树，那就都可以用回溯算法去解。解之前先自己把决策树画出来。</p></li><li><p>注意选择列表的更新，根据题目中的要求来更新选择列表，注意剪枝的条件和位置</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转菜单页面制作</title>
      <link href="/2022/07/11/%E6%97%8B%E8%BD%AC%E8%8F%9C%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/"/>
      <url>/2022/07/11/%E6%97%8B%E8%BD%AC%E8%8F%9C%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h2><p>本页面分成两个部分，整体容器container和导航栏nav。<br>其中container又包含正文部分和按钮区域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span>&gt;</span>关<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;open&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span>&gt;</span>开<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Amazing Article<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>Florin Pop<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium quia in ratione dolores cupiditate, maxime aliquid impedit dolorem nam dolor omnis atque fuga labore modi veritatis porro laborum minus, illo, maiores recusandae cumque ipsa quos. Tenetur, consequuntur mollitia labore pariatur sunt quia harum aut. Eum maxime dolorem provident natus veritatis molestiae cumque quod voluptates ab non, tempore cupiditate? Voluptatem, molestias culpa. Corrupti, laudantium iure aliquam rerum sint nam quas dolor dignissimos in error placeat quae temporibus minus optio eum soluta cupiditate! Cupiditate saepe voluptates laudantium. Ducimus consequuntur perferendis consequatur nobis exercitationem molestias fugiat commodi omnis. Asperiores quia tenetur nemo ipsa.</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>My dog<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1507146426996-ef05306b995a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2100&amp;q=80&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit libero deleniti rerum quo, incidunt vel consequatur culpa ullam. Magnam facere earum unde harum. Ea culpa veritatis magnam at aliquid. Perferendis totam placeat molestias illo laudantium? Minus id minima doloribus dolorum fugit deserunt qui vero voluptas, ut quia cum amet temporibus veniam ad ea ab perspiciatis, enim accusamus asperiores explicabo provident. Voluptates sint, neque fuga cum illum, tempore autem maxime similique laborum odio, magnam esse. Aperiam?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><h3 id="按钮区域样式"><a href="#按钮区域样式" class="headerlink" title="按钮区域样式"></a>按钮区域样式</h3><p>整片按钮区域设计为圆形，半径100px,top和left的距离都为-100px，<br>即圆形区域在页面左上角露出四分之一，预留出选装的空间。</p><p>两个按钮中开始按钮最开始显示，关闭按钮转过去在背面，当show-nav类加上，<br>按钮区域转过去，露出关闭按钮。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.circle-container</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.circle</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ff7979</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;     </span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">transition</span>: transform <span class="number">0.5s</span> linear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.show-nav</span> <span class="selector-class">.circle</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">70deg</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.circle</span> <span class="selector-tag">button</span>&#123;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: transparent;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-id">#open</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-id">#close</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">60%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">        <span class="attribute">transform-origin</span>: top left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="导航栏css样式"><a href="#导航栏css样式" class="headerlink" title="导航栏css样式"></a>导航栏css样式</h3><p> 导航栏最初不能看见，其中的三个li利用相邻选择器设定不同的margin和位置，<br> 最初三个li元素translate-x都为负值，都不在页面中显示，加上show-nav类后，<br> 用相邻选择器设置所有li元素的li的translate-x为0，保持可见，但margin-left的值仍有差距使各个li保持一个阶梯型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.show-nav</span>+<span class="selector-tag">nav</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">            <span class="attribute">transition-delay</span>: <span class="number">0.3s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span>&#123;</span><br><span class="line">            <span class="attribute">position</span>: fixed;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">z-index</span>:<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">            <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span><br><span class="line">            <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">150%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span><br><span class="line">            <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">200%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="attribute">transform</span>: all <span class="number">0.5s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#ff7979</span>;</span><br><span class="line">            <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>最后为open和close按钮安装一个事件监听器，按按钮为contain加上show-nav和移除show-nav类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> open=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> close=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;close&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> container=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">open.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    container.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show-nav&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">close.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    container.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show-nav&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:<span class="number">#fafafa</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: top left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-width</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.show-nav</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">20deg</span>) ;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle-container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff7979</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;     </span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.show-nav</span> <span class="selector-class">.circle</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">70deg</span>) ;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span> <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-id">#open</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span> <span class="selector-tag">button</span><span class="selector-id">#close</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">60%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: top left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.show-nav</span>+<span class="selector-tag">nav</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>) <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition-delay</span>: <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>:<span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-transform</span>: uppercase;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">150%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">200%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fafafa</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: all <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ff7979</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.content</span> small&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:<span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span>&gt;</span>关<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;open&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span>&gt;</span>开<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Amazing Article<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>Florin Pop<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium quia in ratione dolores cupiditate, maxime aliquid impedit dolorem nam dolor omnis atque fuga labore modi veritatis porro laborum minus, illo, maiores recusandae cumque ipsa quos. Tenetur, consequuntur mollitia labore pariatur sunt quia harum aut. Eum maxime dolorem provident natus veritatis molestiae cumque quod voluptates ab non, tempore cupiditate? Voluptatem, molestias culpa. Corrupti, laudantium iure aliquam rerum sint nam quas dolor dignissimos in error placeat quae temporibus minus optio eum soluta cupiditate! Cupiditate saepe voluptates laudantium. Ducimus consequuntur perferendis consequatur nobis exercitationem molestias fugiat commodi omnis. Asperiores quia tenetur nemo ipsa.</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>My dog<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1507146426996-ef05306b995a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2100&amp;q=80&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit libero deleniti rerum quo, incidunt vel consequatur culpa ullam. Magnam facere earum unde harum. Ea culpa veritatis magnam at aliquid. Perferendis totam placeat molestias illo laudantium? Minus id minima doloribus dolorum fugit deserunt qui vero voluptas, ut quia cum amet temporibus veniam ad ea ab perspiciatis, enim accusamus asperiores explicabo provident. Voluptates sint, neque fuga cum illum, tempore autem maxime similique laborum odio, magnam esse. Aperiam?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> open=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;open&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> close=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;close&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> container=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    open.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;show-nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    close.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;show-nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>progress step 项目制作</title>
      <link href="/2022/07/05/postName/"/>
      <url>/2022/07/05/postName/</url>
      
        <content type="html"><![CDATA[<h2 id="html结构以及对应css样式"><a href="#html结构以及对应css样式" class="headerlink" title="html结构以及对应css样式"></a>html结构以及对应css样式</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress_container&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle active&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span> <span class="attr">disabled</span>&gt;</span>上一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attr">--line-fill</span>: <span class="number">#3498db</span>;</span><br><span class="line">    <span class="attr">--line-empty</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f6f7f6</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">     <span class="attribute">align-items</span>: center;</span><br><span class="line">     <span class="attribute">justify-content</span>: center;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">     <span class="attribute">overflow</span>: hidden;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress_container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress_container</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(empty);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--line-fill);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">var</span>(--line-empty);</span><br><span class="line">    <span class="attribute">transform</span>: all <span class="number">0.4s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">var</span>(--line-fill) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:disabled</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js语法"><a href="#js语法" class="headerlink" title="js语法"></a>js语法</h2><h3 id="事先定义"><a href="#事先定义" class="headerlink" title="事先定义"></a>事先定义</h3><p>以下定义各项的引用</p><ol><li>进度条的引用</li><li>上一项的引用</li><li>下一项的引用</li><li>circle 元素数据流</li><li>当前停留的阶段</li></ol><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> progress =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> prev =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prev&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> next =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> circles =<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.circle&#x27;</span>); </span><br><span class="line">    <span class="keyword">let</span> currentActive=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="定义更新函数"><a href="#定义更新函数" class="headerlink" title="定义更新函数"></a>定义更新函数</h3><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    circles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">circle,idx</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx&lt;currentActive)&#123;</span><br><span class="line">            circle.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            circle.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> active=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.active&#x27;</span>);</span><br><span class="line">    progress.<span class="property">style</span>.<span class="property">width</span>=(active.<span class="property">length</span>-<span class="number">1</span>)/(circles.<span class="property">length</span>-<span class="number">1</span>)*<span class="number">100</span>+<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(currentActive==<span class="number">1</span>) &#123;</span><br><span class="line">        prev.<span class="property">disabled</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(currentActive==circles.<span class="property">length</span>)&#123;</span><br><span class="line">        next.<span class="property">disabled</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        prev.<span class="property">disabled</span>=<span class="literal">false</span>;</span><br><span class="line">        next.<span class="property">disabled</span>=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>foreach方法遍历circles的元素，其中circle为单个元素，idx为circle元素的序号.当idx序号小于当前阶段，则为该元素增添active的类，反之移除该类。用active变量承接所有active元素的引用，其长度（length）表示当前已经激活的阶段，与circles的长度相除得到progress进度条的长度属性此外当阶段出于第一或最后时对应的按钮将无法点击，因此设定相应的属性</code></pre><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><pre><code>下面设置两个按钮的事件监听器</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">next.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">    currentActive++;</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">prev.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">    currentActive--;</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>每一次点击对应的按钮，改变当前的阶段数，并调用function函数</code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-pseudo">:root</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--line-fill</span>: <span class="number">#3498db</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attr">--line-empty</span>: <span class="number">#e0e0e0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f6f7f6</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex; </span></span><br><span class="line"><span class="language-css">             <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.progress_container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.progress_container</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(empty);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.progress</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--line-fill);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.circle</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">var</span>(--line-empty);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: all <span class="number">0.4s</span> ease;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: <span class="built_in">var</span>(--line-fill) <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">outline</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:disabled</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress_container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle active&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span> <span class="attr">disabled</span>&gt;</span>上一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> progress =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> prev =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prev&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> next =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;next&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> circles =<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.circle&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> currentActive=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    next.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        currentActive++;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">update</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    prev.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        currentActive--;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">update</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        circles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">circle,idx</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(idx&lt;currentActive)&#123;</span></span><br><span class="line"><span class="language-javascript">                circle.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                circle.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> active=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        progress.<span class="property">style</span>.<span class="property">width</span>=(active.<span class="property">length</span>-<span class="number">1</span>)/(circles.<span class="property">length</span>-<span class="number">1</span>)*<span class="number">100</span>+<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(currentActive==<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            prev.<span class="property">disabled</span>=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span> <span class="keyword">if</span>(currentActive==circles.<span class="property">length</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            next.<span class="property">disabled</span>=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            prev.<span class="property">disabled</span>=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            next.<span class="property">disabled</span>=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/05/hello-world/"/>
      <url>/2022/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
